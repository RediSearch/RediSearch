#!/usr/bin/env python3
"""
Rust Code Review Script

This script generates automated code reviews for Rust files in a PR using OpenAI's GPT-4.
It analyzes git diffs and posts comprehensive review comments to the PR.
"""

import os
import json
import requests
import subprocess
import sys
from openai import OpenAI


def get_file_diff(file_path):
    """Get the git diff for a specific file with context lines."""
    try:
        # Get the diff for this file with more context lines
        result = subprocess.run(
            ["git", "diff", "-U10", "--staged", "origin/main", "--", file_path],
            capture_output=True,
            text=True,
            check=True
        )
        if not result.stdout:
            # If no staged changes, get the regular diff
            result = subprocess.run(
                ["git", "diff", "-U10", "origin/main", "--", file_path],
                capture_output=True,
                text=True,
                check=True
            )
        return result.stdout
    except subprocess.CalledProcessError:
        return f"Error getting diff for {file_path}"


def generate_review_prompt(all_diffs):
    """Generate the prompt for OpenAI based on the file diffs."""
    prompt = """
You are a senior Rust developer performing a code review. Review the following Rust code changes for:
1. Code quality and best practices
2. Potential bugs or edge cases
3. Performance considerations
4. Readability and maintainability
5. Proper error handling
6. Memory safety concerns

Format your review as a markdown document with sections for each file, highlighting both positive aspects and areas for improvement.
Be specific and provide actionable feedback. Include code examples where appropriate.

Here are the changes to review:

"""
    
    for file, diff in all_diffs.items():
        prompt += f"\n## File: {file}\n```diff\n{diff}\n```\n"
    
    return prompt


def call_openai_api(client, prompt):
    """Call OpenAI API to generate the code review."""
    try:
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "You are a senior Rust developer performing a thorough code review."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=4000,
            temperature=0.7
        )
        return response.choices[0].message.content
    except Exception as e:
        print(f"Error calling OpenAI API: {str(e)}")
        sys.exit(1)


def post_review_comment(repo, pr_number, review, github_token):
    """Post the review as a comment on the PR."""
    headers = {
        "Authorization": f"token {github_token}",
        "Accept": "application/vnd.github.v3+json"
    }

    comment_data = {
        "body": f"# Rust Code Review\n\n{review}\n\n_This review was automatically generated by the Rust Code Reviewer Bot._"
    }

    comment_url = f"https://api.github.com/repos/{repo}/issues/{pr_number}/comments"
    response = requests.post(comment_url, headers=headers, json=comment_data)

    if response.status_code >= 400:
        print(f"Error posting comment: {response.status_code} - {response.text}")
        sys.exit(1)
    else:
        print(f"Successfully posted code review comment to PR #{pr_number}")


def main():
    """Main function to orchestrate the code review process."""
    # Configuration from environment variables
    pr_number = os.environ.get("PR_NUMBER")
    repo = os.environ.get("REPO")
    github_token = os.environ.get("GITHUB_TOKEN")
    openai_api_key = os.environ.get("OPENAI_API_KEY")
    
    if not all([pr_number, repo, github_token, openai_api_key]):
        print("Missing required environment variables")
        sys.exit(1)

    # Initialize OpenAI client
    client = OpenAI(api_key=openai_api_key)

    # Get the list of changed Rust files
    files_str = os.environ.get("CHANGED_FILES", "")
    if not files_str:
        print("No Rust files to review")
        sys.exit(0)

    files = files_str.split()

    # Collect diffs for all changed files
    all_diffs = {}
    for file in files:
        diff = get_file_diff(file)
        if diff and not diff.startswith("Error"):
            all_diffs[file] = diff

    if not all_diffs:
        print("No meaningful diffs found in Rust files")
        sys.exit(0)

    # Generate and post the review
    prompt = generate_review_prompt(all_diffs)
    review = call_openai_api(client, prompt)
    post_review_comment(repo, pr_number, review, github_token)


if __name__ == "__main__":
    main()
