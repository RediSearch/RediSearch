name: Common Flow for Tests

# Documentation: https://redislabs.atlassian.net/wiki/spaces/DX/pages/3967844669/RediSearch+CI+refactor

on:
  workflow_call:
    inputs:
      env:
        default: "${{ vars.RUNS_ON }}"
        type: string
      container:
        type: string
      san:
        type: string
      coverage:
        type: boolean
        default: false
      get-redis:
        type: string
      test-config:
        description: 'Test configuration environment variable (e.g. "CONFIG=tls" or "QUICK=1")'
        required: true
        type: string
      coordinator:
        type: boolean
        default: true
      standalone:
        type: boolean
        default: true
      pre-steps-script:
        type: string
        description: 'Script to run before any other steps (extremely basic dependency needs only)'
      rejson:
        type: boolean
        default: true
        description: 'Enable tests with RedisJSON'
      rejson-branch:
        type: string
        default: master
        description: 'Branch to use when building RedisJSON for tests'
      test-timeout:
        type: number
        default: 50

env:
  REJSON: ${{ inputs.rejson && 1 || 0 }}  # convert the boolean input to numeric
  VERBOSE_UTESTS: 1
  COV: ${{ inputs.coverage && 1 || 0 }}  # convert the boolean input to numeric
  # Setting RUSTFLAGS here to ensure that all `cargo` invocations use the same
  # flags, and therefore reuse the same intermediate build artifacts.
  RUSTFLAGS: "-D warnings"
  RUST_BACKTRACE: "full"

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ${{ inputs.env }}
    container: ${{ inputs.container || null }}
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    steps:
      # Split to alpine and non-alpine due to different default shells, once the dependency installation is done, we can use the same shell in the rest of the flow
      - name: Pre-steps Dependencies (Alpine)
        if: inputs.pre-steps-script && inputs.container == 'alpine:3'
        shell: sh -l -eo pipefail {0}
        run: ${{ inputs.pre-steps-script }}
      - name: Pre-steps Dependencies (Non-Alpine)
        if: inputs.pre-steps-script && inputs.container != 'alpine:3'
        run: ${{ inputs.pre-steps-script }}
      - name: Enable dynamic linking to C runtime in Alpine
        if: inputs.container == 'alpine:3'
        run: echo RUST_DYN_CRT=1 >> $GITHUB_ENV
      - name: Get Installation Mode
        id: mode
        run: |
          [[ -z "${{ inputs.container }}" ]] && echo "mode=sudo" >> $GITHUB_OUTPUT || echo "mode=" >> $GITHUB_OUTPUT
      - name: Check if node20 is Supported
        id: node20 # TODO: Remove this when node20 is supported on all platforms, or when we drop support for these platforms
        run: |
          for platform in amazonlinux:2 alpine:3; do
            if [[ "${{ inputs.container }}" == "$platform" ]]; then
              echo "supported=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          done
          echo "supported=true" >> $GITHUB_OUTPUT
      - name: Full checkout (node20)
        if: steps.node20.outputs.supported == 'true'
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Full checkout (node20 not supported)
        if: steps.node20.outputs.supported == 'false'
        run: |
          # Execute the logic based on the detected platform
          echo "Detected platform: ${{ inputs.container }}"
          case "${{ inputs.container }}" in
            amazonlinux:2 | alpine:3)

              # Configure the safe directory
              git config --global --add safe.directory /__w/${{ github.repository }}

              # Checkout
              REPO_URL="https://github.com/${{ github.repository }}.git"

              # Initialize a Git repository
              git init
              git remote add origin "$REPO_URL"

              # Fetch and checkout ref
              git fetch origin "${{ github.ref }}" || {
                echo "Failed to fetch ref: '${{ github.ref }}'";
                exit 1;
              }
              git checkout FETCH_HEAD  # Check out the fetched ref

              # Update submodules
              git submodule update --init --recursive
              ;;
            *)
              echo "Unsupported platform: '${{ inputs.container }}'"
              exit 1
              ;;
          esac
      - name: Setup
        working-directory: .install
        run: |
          ./install_script.sh ${{ steps.mode.outputs.mode }}
      - name: Setup tests dependencies
        run: |
          .install/test_deps/common_installations.sh ${{ steps.mode.outputs.mode }}
      - name: Install LLVM for sanitizer
        if: inputs.san == 'address'
        working-directory: .install
        run: |
          ./install_llvm.sh ${{ steps.mode.outputs.mode }}
          CLANG_BIN=$(find /usr/bin /usr/local/bin -name "clang-[0-9]*" 2>/dev/null | sort -V | tail -1)
          CLANG_VERSION=$(basename $CLANG_BIN | sed 's/clang-//')
          echo "Using LLVM version: $CLANG_VERSION"
          echo "CC=$CLANG_BIN" >> $GITHUB_ENV
          echo "CXX=$(dirname $CLANG_BIN)/clang++-$CLANG_VERSION" >> $GITHUB_ENV
          echo "LD=$CLANG_BIN" >> $GITHUB_ENV
      - name: Get Redis (node20)
        if: ${{ steps.node20.outputs.supported == 'true' }}
        uses: actions/checkout@v4
        with:
          repository: redis/redis
          ref: ${{ inputs.get-redis }}
          path: redis
      - name: Get Redis (node20 not supported)
        if: ${{ steps.node20.outputs.supported == 'false' }}
        run: |
          REPO_URL="https://github.com/redis/redis.git"
          DEST_DIR="redis"  # Directory to clone into

          # Clone the repository (shallow clone without tags)
          git clone $REPO_URL $DEST_DIR
          cd $DEST_DIR

          # Checkout the REF
          git fetch origin ${{ inputs.get-redis }}
          git checkout ${{ inputs.get-redis }}

      - name: Build Redis
        working-directory: redis
        run:  ${{ steps.mode.outputs.mode }} make install
              BUILD_TLS=yes
              SANITIZER=${{ inputs.san }}

      - name: Set Artifact Names
        # Artifact names have to be unique, so we base them on the environment.
        # We also remove invalid characters from the name.
        id: artifact-names
        run: | # Invalid characters include: Double quote ", Colon :, Less than <, Greater than >, Vertical bar |, Asterisk *, Question mark ?
          echo "name=$(echo "${{ format('{0}', inputs.san == 'address' && 'sanitizer' || '') }} \
                             ${{ format('{0}', inputs.coverage && 'coverage test' || '') }} \
                             ${{ inputs.container || inputs.env }} ${{ runner.arch }} - Redis ${{ inputs.get-redis || 'unstable' }}" | \
                       sed -e 's/[":\/\\<>\|*?]/_/g' -e 's/__*/_/g' -e 's/^_//' -e 's/_$//')" >> $GITHUB_OUTPUT
      - name: Build
        env:
          SAN: ${{ inputs.san }}
          REDIS_VER: ${{ inputs.get-redis }}
          ENABLE_ASSERT: 1
        run: ./build.sh TESTS
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      # Re-use the build artifacts
      # [Add steps to restore the build environment]
      - name: Unit tests
        timeout-minutes: ${{ fromJSON(inputs.test-timeout) }}
        id: unit_tests
        continue-on-error: true
        env:
          SAN: ${{ inputs.san }}
          LOG: 1
          CLEAR_LOGS: 0
          ENABLE_ASSERT: 1
        run: ./build.sh RUN_UNIT_TESTS RUN_RUST_TESTS
      - name: Upload unit test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: Unit Test Logs ${{ needs.setup.outputs.artifact_name }}
          path: |
            tests/**/logs/*.log*
            bin/**/redisearch.so
            bin/**/redisearch.so.debug
          if-no-files-found: ignore

  standalone-tests:
    name: Standalone Tests
    if: ${{ inputs.standalone }}
    runs-on: ${{ inputs.env }}
    container: ${{ inputs.container || null }}
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    steps:
          # Split to alpine and non-alpine due to different default shells, once the dependency installation is done, we can use the same shell in the rest of the flow
      - name: Pre-steps Dependencies (Alpine)
        if: inputs.pre-steps-script && inputs.container == 'alpine:3'
        shell: sh -l -eo pipefail {0}
        run: ${{ inputs.pre-steps-script }}
      - name: Pre-steps Dependencies (Non-Alpine)
        if: inputs.pre-steps-script && inputs.container != 'alpine:3'
        run: ${{ inputs.pre-steps-script }}
      - name: Enable dynamic linking to C runtime in Alpine
        if: inputs.container == 'alpine:3'
        run: echo RUST_DYN_CRT=1 >> $GITHUB_ENV
      - name: Get Installation Mode
        id: mode
        run: |
          [[ -z "${{ inputs.container }}" ]] && echo "mode=sudo" >> $GITHUB_OUTPUT || echo "mode=" >> $GITHUB_OUTPUT
      - name: Check if node20 is Supported
        id: node20 # TODO: Remove this when node20 is supported on all platforms, or when we drop support for these platforms
        run: |
          for platform in amazonlinux:2 alpine:3; do
            if [[ "${{ inputs.container }}" == "$platform" ]]; then
              echo "supported=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          done
          echo "supported=true" >> $GITHUB_OUTPUT
      - name: Full checkout (node20)
        if: steps.node20.outputs.supported == 'true'
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Full checkout (node20 not supported)
        if: steps.node20.outputs.supported == 'false'
        run: |
          # Execute the logic based on the detected platform
          echo "Detected platform: ${{ inputs.container }}"
          case "${{ inputs.container }}" in
            amazonlinux:2 | alpine:3)

              # Configure the safe directory
              git config --global --add safe.directory /__w/${{ github.repository }}

              # Checkout
              REPO_URL="https://github.com/${{ github.repository }}.git"

              # Initialize a Git repository
              git init
              git remote add origin "$REPO_URL"

              # Fetch and checkout ref
              git fetch origin "${{ github.ref }}" || {
                echo "Failed to fetch ref: '${{ github.ref }}'";
                exit 1;
              }
              git checkout FETCH_HEAD  # Check out the fetched ref

              # Update submodules
              git submodule update --init --recursive
              ;;
            *)
              echo "Unsupported platform: '${{ inputs.container }}'"
              exit 1
              ;;
          esac
      - name: Setup
        working-directory: .install
        run: |
          ./install_script.sh ${{ steps.mode.outputs.mode }}
      - name: Setup tests dependencies
        run: |
          .install/test_deps/common_installations.sh ${{ steps.mode.outputs.mode }}
      - name: Install LLVM for sanitizer
        if: inputs.san == 'address'
        working-directory: .install
        run: |
          ./install_llvm.sh ${{ steps.mode.outputs.mode }}
          CLANG_BIN=$(find /usr/bin /usr/local/bin -name "clang-[0-9]*" 2>/dev/null | sort -V | tail -1)
          CLANG_VERSION=$(basename $CLANG_BIN | sed 's/clang-//')
          echo "Using LLVM version: $CLANG_VERSION"
          echo "CC=$CLANG_BIN" >> $GITHUB_ENV
          echo "CXX=$(dirname $CLANG_BIN)/clang++-$CLANG_VERSION" >> $GITHUB_ENV
          echo "LD=$CLANG_BIN" >> $GITHUB_ENV
      - name: Get Redis (node20)
        if: ${{ steps.node20.outputs.supported == 'true' }}
        uses: actions/checkout@v4
        with:
          repository: redis/redis
          ref: ${{ inputs.get-redis }}
          path: redis
      - name: Get Redis (node20 not supported)
        if: ${{ steps.node20.outputs.supported == 'false' }}
        run: |
          REPO_URL="https://github.com/redis/redis.git"
          DEST_DIR="redis"  # Directory to clone into

          # Clone the repository (shallow clone without tags)
          git clone $REPO_URL $DEST_DIR
          cd $DEST_DIR

          # Checkout the REF
          git fetch origin ${{ inputs.get-redis }}
          git checkout ${{ inputs.get-redis }}

      - name: Build Redis
        working-directory: redis
        run:  ${{ steps.mode.outputs.mode }} make install
              BUILD_TLS=yes
              SANITIZER=${{ inputs.san }}

      - name: Set Artifact Names
        # Artifact names have to be unique, so we base them on the environment.
        # We also remove invalid characters from the name.
        id: artifact-names
        run: | # Invalid characters include: Double quote ", Colon :, Less than <, Greater than >, Vertical bar |, Asterisk *, Question mark ?
          echo "name=$(echo "${{ format('{0}', inputs.san == 'address' && 'sanitizer' || '') }} \
                             ${{ format('{0}', inputs.coverage && 'coverage test' || '') }} \
                             ${{ inputs.container || inputs.env }} ${{ runner.arch }} - Redis ${{ inputs.get-redis || 'unstable' }}" | \
                       sed -e 's/[":\/\\<>\|*?]/_/g' -e 's/__*/_/g' -e 's/^_//' -e 's/_$//')" >> $GITHUB_OUTPUT
      - name: Build
        env:
          SAN: ${{ inputs.san }}
          REDIS_VER: ${{ inputs.get-redis }}
          ENABLE_ASSERT: 1
        run: ./build.sh TESTS
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      # Re-use the build artifacts
      # [Add steps to restore the build environment]
      - name: Flow tests (standalone)
        timeout-minutes: ${{ fromJSON(inputs.test-timeout) }}
        id: standalone_tests
        continue-on-error: true
        env:
          SAN: ${{ inputs.san }}
          LOG: 1
          CLEAR_LOGS: 0
          REDIS_STANDALONE: 1
          REJSON: ${{ env.REJSON }}
          REJSON_BRANCH: ${{ inputs.rejson-branch }}
          ENABLE_ASSERT: 1
        run: ./build.sh RUN_PYTEST ${{ inputs.test-config }}
      - name: Upload standalone test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: Standalone Test Logs ${{ needs.setup.outputs.artifact_name }}
          path: |
            tests/**/logs/*.log*
            bin/**/redisearch.so
            bin/**/redisearch.so.debug
          if-no-files-found: ignore

  coordinator-tests:
    name: Coordinator Tests
    if: ${{ inputs.coordinator }}
    runs-on: ${{ inputs.env }}
    container: ${{ inputs.container || null }}
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    steps:
      # Split to alpine and non-alpine due to different default shells, once the dependency installation is done, we can use the same shell in the rest of the flow
      - name: Pre-steps Dependencies (Alpine)
        if: inputs.pre-steps-script && inputs.container == 'alpine:3'
        shell: sh -l -eo pipefail {0}
        run: ${{ inputs.pre-steps-script }}
      - name: Pre-steps Dependencies (Non-Alpine)
        if: inputs.pre-steps-script && inputs.container != 'alpine:3'
        run: ${{ inputs.pre-steps-script }}
      - name: Enable dynamic linking to C runtime in Alpine
        if: inputs.container == 'alpine:3'
        run: echo RUST_DYN_CRT=1 >> $GITHUB_ENV
      - name: Get Installation Mode
        id: mode
        run: |
          [[ -z "${{ inputs.container }}" ]] && echo "mode=sudo" >> $GITHUB_OUTPUT || echo "mode=" >> $GITHUB_OUTPUT
      - name: Check if node20 is Supported
        id: node20 # TODO: Remove this when node20 is supported on all platforms, or when we drop support for these platforms
        run: |
          for platform in amazonlinux:2 alpine:3; do
            if [[ "${{ inputs.container }}" == "$platform" ]]; then
              echo "supported=false" >> $GITHUB_OUTPUT
              exit 0
            fi
          done
          echo "supported=true" >> $GITHUB_OUTPUT
      - name: Full checkout (node20)
        if: steps.node20.outputs.supported == 'true'
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Full checkout (node20 not supported)
        if: steps.node20.outputs.supported == 'false'
        run: |
          # Execute the logic based on the detected platform
          echo "Detected platform: ${{ inputs.container }}"
          case "${{ inputs.container }}" in
            amazonlinux:2 | alpine:3)

              # Configure the safe directory
              git config --global --add safe.directory /__w/${{ github.repository }}

              # Checkout
              REPO_URL="https://github.com/${{ github.repository }}.git"

              # Initialize a Git repository
              git init
              git remote add origin "$REPO_URL"

              # Fetch and checkout ref
              git fetch origin "${{ github.ref }}" || {
                echo "Failed to fetch ref: '${{ github.ref }}'";
                exit 1;
              }
              git checkout FETCH_HEAD  # Check out the fetched ref

              # Update submodules
              git submodule update --init --recursive
              ;;
            *)
              echo "Unsupported platform: '${{ inputs.container }}'"
              exit 1
              ;;
          esac
      - name: Setup
        working-directory: .install
        run: |
          ./install_script.sh ${{ steps.mode.outputs.mode }}
      - name: Setup tests dependencies
        run: |
          .install/test_deps/common_installations.sh ${{ steps.mode.outputs.mode }}
      - name: Install LLVM for sanitizer
        if: inputs.san == 'address'
        working-directory: .install
        run: |
          ./install_llvm.sh ${{ steps.mode.outputs.mode }}
          CLANG_BIN=$(find /usr/bin /usr/local/bin -name "clang-[0-9]*" 2>/dev/null | sort -V | tail -1)
          CLANG_VERSION=$(basename $CLANG_BIN | sed 's/clang-//')
          echo "Using LLVM version: $CLANG_VERSION"
          echo "CC=$CLANG_BIN" >> $GITHUB_ENV
          echo "CXX=$(dirname $CLANG_BIN)/clang++-$CLANG_VERSION" >> $GITHUB_ENV
          echo "LD=$CLANG_BIN" >> $GITHUB_ENV
      - name: Get Redis (node20)
        if: ${{ steps.node20.outputs.supported == 'true' }}
        uses: actions/checkout@v4
        with:
          repository: redis/redis
          ref: ${{ inputs.get-redis }}
          path: redis
      - name: Get Redis (node20 not supported)
        if: ${{ steps.node20.outputs.supported == 'false' }}
        run: |
          REPO_URL="https://github.com/redis/redis.git"
          DEST_DIR="redis"  # Directory to clone into

          # Clone the repository (shallow clone without tags)
          git clone $REPO_URL $DEST_DIR
          cd $DEST_DIR

          # Checkout the REF
          git fetch origin ${{ inputs.get-redis }}
          git checkout ${{ inputs.get-redis }}

      - name: Build Redis
        working-directory: redis
        run:  ${{ steps.mode.outputs.mode }} make install
              BUILD_TLS=yes
              SANITIZER=${{ inputs.san }}

      - name: Set Artifact Names
        # Artifact names have to be unique, so we base them on the environment.
        # We also remove invalid characters from the name.
        id: artifact-names
        run: | # Invalid characters include: Double quote ", Colon :, Less than <, Greater than >, Vertical bar |, Asterisk *, Question mark ?
          echo "name=$(echo "${{ format('{0}', inputs.san == 'address' && 'sanitizer' || '') }} \
                             ${{ format('{0}', inputs.coverage && 'coverage test' || '') }} \
                             ${{ inputs.container || inputs.env }} ${{ runner.arch }} - Redis ${{ inputs.get-redis || 'unstable' }}" | \
                       sed -e 's/[":\/\\<>\|*?]/_/g' -e 's/__*/_/g' -e 's/^_//' -e 's/_$//')" >> $GITHUB_OUTPUT
      - name: Build
        env:
          SAN: ${{ inputs.san }}
          REDIS_VER: ${{ inputs.get-redis }}
          ENABLE_ASSERT: 1
        run: ./build.sh TESTS

      - uses: actions/checkout@v4
        with:
          submodules: recursive
      # Re-use the build artifacts
      # [Add steps to restore the build environment]
      - name: Flow tests (coordinator)
        timeout-minutes: ${{ fromJSON(inputs.test-timeout) }}
        id: coordinator_tests
        continue-on-error: true
        env:
          SAN: ${{ inputs.san }}
          LOG: 1
          CLEAR_LOGS: 0
          REDIS_STANDALONE: 0
          REJSON: ${{ env.REJSON }}
          REJSON_BRANCH: ${{ inputs.rejson-branch }}
          ENABLE_ASSERT: 1
        run: ./build.sh RUN_PYTEST ${{ inputs.test-config }}
      - name: Upload coordinator test artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: Coordinator Test Logs ${{ needs.setup.outputs.artifact_name }}
          path: |
            tests/**/logs/*.log*
            bin/**/redisearch.so
            bin/**/redisearch.so.debug
          if-no-files-found: ignore

  results:
    needs: [unit-tests, standalone-tests, coordinator-tests]
    if: always()
    runs-on: ${{ inputs.env }}
    container: ${{ inputs.container || null }}
    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.unit-tests.result }}" == "failure" ||
                "${{ needs.standalone-tests.result }}" == "failure" ||
                "${{ needs.coordinator-tests.result }}" == "failure" ]]; then
            echo "Unit Tests: ${{ needs.unit-tests.result }}"
            echo "Standalone: ${{ needs.standalone-tests.result }}"
            echo "Coordinator: ${{ needs.coordinator-tests.result }}"
            exit 1
          fi

      # Coverage upload steps if needed
      - name: Upload flow coverage
        if: inputs.coverage
        uses: codecov/codecov-action@v5
        with:
          files: bin/flow_standalone.info,bin/flow_coordinator.info
          disable_search: true
          flags: flow
          fail_ci_if_error: true # Fail on upload errors
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Upload unit coverage
        if: inputs.coverage
        uses: codecov/codecov-action@v5
        with:
          files: bin/unit.info,bin/rust_cov.info
          disable_search: true
          flags: unit
          fail_ci_if_error: true # Fail on upload errors
          token: ${{ secrets.CODECOV_TOKEN }}
