name: Release a Version

on:
  release:
    types: [published]

jobs:
  update-version:
    # Verify that the tag matches the version in src/version.h, and generate a PR to bump the version for the next patch
    runs-on: ${{ vars.RUNS_ON }}
    outputs:
      cur_version: ${{ steps.verify.outputs.cur_version }}
      next_version: ${{ steps.verify.outputs.next_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Verify Tag and Version
        id: verify
        env:
          # Not used, but useful for debugging in case of failure. See https://github.com/actions/runner/issues/2788
          GH_CONTEXT: ${{ toJson(github) }}
        shell: python
        run: |
          with open("src/version.h", "r") as fp:
            major, minor, patch = [int(l.rsplit(maxsplit=1)[-1]) for l in fp if l.startswith("#define REDISEARCH_VERSION_")]
          tag = '${{ github.event.release.tag_name }}'
          if tag != f"v{major}.{minor}.{patch}":
            raise Exception(f"Tag {tag} does not match version v{major}.{minor}.{patch}")
          version_branch = '${{ github.event.release.target_commitish }}'
          if version_branch != f"{major}.{minor}":
            raise Exception(f"Version branch {version_branch} does not match the tag {tag}")

          import os
          with open(os.environ["GITHUB_OUTPUT"], "a") as fp:
            print(f"cur_version={major}.{minor}.{patch}", file=fp)
            print(f"next_version={major}.{minor}.{patch+1}", file=fp)
            print(f"next_patch={patch+1}", file=fp)

      - name: Update version for next patch
        env:
          LINE: '#define REDISEARCH_VERSION_PATCH'
        # find the line with the patch version and replace it with the next patch version
        run: sed -i "s/^${{ env.LINE }} [0-9]\+$/${{ env.LINE }} ${{ steps.verify.outputs.next_patch }}/" src/version.h

      - name: Commit and push
        run: |
          git config --global user.name "${{ github.triggering_actor }}"
          git config --global user.email "${{ github.event.sender.id }}+${{ github.event.sender.login }}@users.noreply.github.com"
          git checkout -b bump-version-${{ steps.verify.outputs.next_version }}
          git add src/version.h
          git commit -m "Bump version from ${{ steps.verify.outputs.cur_version }} to ${{ steps.verify.outputs.next_version }}"
          git push origin bump-version-${{ steps.verify.outputs.next_version }}

      - name: Create Pull Request
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh pr create \
            --title    "Bump version from ${{ steps.verify.outputs.cur_version }} to ${{ steps.verify.outputs.next_version }}" \
            --body     "This PR was automatically created by the release workflow of ${{ github.event.release.tag_name }}." \
            --head     "bump-version-${{ steps.verify.outputs.next_version }}" \
            --base     "${{ github.event.release.target_commitish }}" \
            --reviewer "alonre24,DvirDukhan,oshadmi,${{ github.actor }}" \
            --draft

      - name: Trigger CI
        env:
          GH_TOKEN: ${{ secrets.CI_GH_P_TOKEN }}
          BRANCH: bump-version-${{ steps.verify.outputs.next_version }}
        run: |
          gh pr ready $BRANCH -R ${{ github.repository }}
          gh pr merge $BRANCH -R ${{ github.repository }} --auto

  set-artifacts:
    needs: update-version
    runs-on: ${{ vars.RUNS_ON }}
    steps:
      - name: Configure AWS Credentials Using Role
        if: vars.USE_AWS_ROLE == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.ARTIFACT_UPLOAD_AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.ARTIFACT_UPLOAD_AWS_REGION }}
      - name: Configure AWS Credentials Using Keys
        if: vars.USE_AWS_ROLE == 'false'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.ARTIFACT_UPLOAD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ARTIFACT_UPLOAD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.ARTIFACT_UPLOAD_AWS_REGION }}
      - name: Get boto3
        run: pip install boto3
      - name: Set Version Artifacts
        shell: python
        run: |
          import boto3
          import os
          import json
          from concurrent.futures import ThreadPoolExecutor
          from zipfile import ZipFile

          bucket = "redismodules"
          oss_dir = "redisearch-oss"
          ent_dir = "redisearch"

          suffix = ".${{ github.event.release.target_commitish }}.zip"
          new_suffix = ".${{ needs.update-version.outputs.cur_version }}.zip"
          expected_sha = "${{ github.sha }}"

          client = boto3.client("s3")

          ########################### Helper Functions ###########################

          # List all file in `bucket`, with suffix `suffix` and the given prefix (path)
          def list_files_by_branch(prefix):
              paginator = client.get_paginator("list_objects_v2")
              for page in paginator.paginate(Bucket=bucket, Prefix=prefix):
                  for obj in page.get("Contents", []):
                      if obj["Key"].endswith(suffix):
                          yield obj["Key"]

          def list_snapshots_by_branch(dir):
              return list_files_by_branch(f"{dir}/snapshots/{dir}")

          # Return the git sha from the module.json file in the zip file (build sha)
          def extract_sha(key):
              zip_name = os.path.basename(key)
              c = boto3.client("s3")
              c.download_file(bucket, key, zip_name)
              with ZipFile(zip_name, "r") as z:
                  with z.open("module.json") as f:
                      obj = json.load(f)
                      sha = str(obj["git_sha"]) # handle bytes, str, and bytes string representation
                      return sha[2:-1] if sha[:2] in ['b"', "b'"] else sha

          # new location is outside snapshots/ directory and with the new suffix
          # Only called on files we know end with `suffix` and have a `snapshot` directory in the path
          def get_target_name(name):
              return name.replace("snapshots/", "", 1)[:-len(suffix)] + new_suffix

          def group_print(title, args):
              print(f"::group::{title} ({len(args)})")
              print(*args, sep="\n")
              print("::endgroup::")

          ############################### Main Script ###############################

          files = []
          for dir in [oss_dir, ent_dir]:
              files.extend(list_snapshots_by_branch(dir))

          group_print("${{ github.event.release.target_commitish }} Branch candidates", files)

          with ThreadPoolExecutor() as executor:
              sha_list = executor.map(extract_sha, files)

          exclude_list = [(f, sha) for f, sha in zip(files, sha_list) if sha != expected_sha]
          include_list = [f for f in files if f not in [x for x, _ in exclude_list]]
          dest_files = [get_target_name(f) for f in include_list]

          # Log files
          group_print("Excluded files", exclude_list)
          group_print("Included files", include_list)
          group_print("Unexpected SHAs", set([sha for _, sha in exclude_list]))

          # Copy included files to new location
          for src, dst in zip(include_list, dest_files):
              client.copy_object(Bucket=bucket, Key=dst, CopySource={"Bucket": bucket, "Key": src}, ACL="public-read")

          group_print("New Files", dest_files)

          if len(exclude_list) > 0:
              print("::warning title=Unexpected Files::The workflow has encountered files that do not match the "
                    "expected git sha. These files will not be included in the release artifacts. Look for the "
                    "`Excluded files` section above for more details.")
