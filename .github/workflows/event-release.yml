name: Release a Version

on:
  release:
    types: [released]

jobs:
  update-version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Verify Tag and Version
        id: verify
        shell: python
        run: |
          with open("src/version.h", "r") as fp:
            major, minor, patch = [int(l.rsplit(maxsplit=1)[-1]) for l in fp if "#define REDISEARCH_VERSION_" in l]
          tag = '${{ github.ref }}'
          if tag != f"refs/tags/v{major}.{minor}.{patch}":
            raise Exception(f"Tag {tag} does not match version {major}.{minor}.{patch}")

          import os
          with open(os.environ["GITHUB_OUTPUT"], "a") as fp:
            print(f"major={major}", file=fp)
            print(f"minor={minor}", file=fp)
            print(f"patch={patch}", file=fp)
            print(f"next_patch={patch+1}", file=fp)

      - name: Update version for next patch
        run: awk '/^#define REDISEARCH_VERSION_PATCH [0-9]+$/ {sub(/[0-9]+$/, $NF+1)} 1' src/version.h > temp && mv temp src/version.h

      - name: Commit and push
        env:
          cur_version: ${{ steps.verify.outputs.major }}.${{ steps.verify.outputs.minor }}.${{ steps.verify.outputs.patch }}
          next_version: ${{ steps.verify.outputs.major }}.${{ steps.verify.outputs.minor }}.${{ steps.verify.outputs.next_patch }}
        run: |
          git config --global user.email "${{ github.triggering_actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.triggering_actor }}"
          git checkout -b bump-version-${{ env.next_version }}
          git add src/version.h
          git commit -m "Bump version from $cur_version to $next_version"
          git push origin bump-version-${{ env.next_version }}

      - name: Create Pull Request
        uses: actions/github-script@v6
        env:
          cur_version: ${{ steps.verify.outputs.major }}.${{ steps.verify.outputs.minor }}.${{ steps.verify.outputs.patch }}
          next_version: ${{ steps.verify.outputs.major }}.${{ steps.verify.outputs.minor }}.${{ steps.verify.outputs.next_patch }}
        with:
          script: |
              const { data: pr } = await github.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Bump version from ${{ env.cur_version }} to ${{ env.next_version }}`,
                body: `This PR was automatically created by the release workflow of ${{ github.ref_name }}.`,
                head: `bump-version-${{ env.next_version }}`,
                base: context.event.release.target_commitish,
              });

  set-artifacts:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.ARTIFACT_UPLOAD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ARTIFACT_UPLOAD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.ARTIFACT_UPLOAD_AWS_REGION }}
      - name: Set Version Artifacts
        env:
          ENT_DIR: s3://redismodules/redisearch
          OSS_DIR: s3://redismodules/redisearch-oss
          VERSION: ${{ github.ref_name }}
          VER_BRANCH: ${{ github.event.release.target_commitish }}
        run: |
          for DIR in {$ENT_DIR,$OSS_DIR}; do
            ARTIFACTS=$(aws s3 ls $DIR/snapshots/redisearch | grep '.${{ env.VER_BRANCH }}.zip$' | awk '{print $NF}')
            echo "Handling artifacts:"
            echo "$ARTIFACTS"
            echo "----------------- END -----------------"
            for ARTIFACT in $ARTIFACTS; do
              echo -n "Setting $DIR/snapshots/$ARTIFACT to $DIR/${ARTIFACT/.${{ env.VER_BRANCH }}.zip/.${{ env.VERSION }}.zip} ... "
              aws s3 cp $DIR/snapshots/$ARTIFACT $DIR/${ARTIFACT/.${{ env.VER_BRANCH }}.zip/.${{ env.VERSION }}.zip}
              echo "Done"
            done
          done
