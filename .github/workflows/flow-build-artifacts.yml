name: Trigger Build and Upload Artifacts for Environments

on:
  workflow_dispatch:
    inputs:
      platform:
        type: choice
        options:
          - all
          - ubuntu:jammy
          - ubuntu:focal
          - ubuntu:bionic
          - centos:7
          - rockylinux:8
          - rockylinux:9
          - debian:bullseye
          - amazonlinux:2
          - macos
        description: 'Platform to build on. Use "all" to build on all'
        default: all
      architecture:
        type: choice
        options:
          - all
          - x86_64
          - aarch64
        description: 'Architecture to build on. Use "all" to build on all'
        default: all
      reference:
        type: string
        description: 'Optional: Reference (branch, tag, SHA) to build against. Defaults to the base branch'
      redis-reference:
        type: string
        description: 'Optional: Redis reference (branch, tag, SHA) to build against. Defaults to the latest release'
  workflow_call:
    inputs:
      platform:
        type: string
        default: all
      architecture:
        type: string
        default: all
      reference:
        type: string
      redis-reference:
        type: string

env:
  # This will be used as a file name to store the SHA of the last successful build, and as a cache key for this file.
  # key-name ($SHA_CACHE_NAME) -> path to file (name $SHA_CACHE_NAME) -> content (SHA)
  SHA_CACHE_NAME: ${{ inputs.reference || github.ref_name }}-${{ github.event_name }}-last-sha

jobs:
  setup:
    # Sets SHA and Validates the `reference` Input
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.set-sha.outputs.sha }}
      skip: ${{ steps.on-dispatch.outputs.skip || steps.skip.outputs.decision || 'false' }}
      store: ${{ steps.on-dispatch.outputs.store || 'true' }}
      redis-ref: ${{ steps.get-redis.outputs.tag || inputs.redis-reference }}
    steps:
      - name: Validate reference
        uses: actions/checkout@v3
        with:
          # Use the input reference if provided, otherwise use the default behavior of the action
          ref: ${{ inputs.reference }}
      - id: set-sha
        run: echo "sha=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - id: on-dispatch
        # Don't skip and don't record if the workflow was manually triggered
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "skip=false" >> $GITHUB_OUTPUT
          echo "store=false" >> $GITHUB_OUTPUT

      - uses: actions/cache/restore@v3
        if: ${{ github.event_name != 'workflow_dispatch' }}
        id: restore
        with:
          path: ${{ env.SHA_CACHE_NAME }}
          key: ${{ env.SHA_CACHE_NAME }}

      - id: skip
        if: ${{ github.event_name != 'workflow_dispatch' && steps.restore.outputs.cache-hit }}
        run: |
          LAST_SHA=$(cat ${{ env.SHA_CACHE_NAME }})
          CURRENT_SHA=${{ steps.set-sha.outputs.sha }}
          echo "current sha: $CURRENT_SHA"
          echo "   last sha: $LAST_SHA"
          if [ "$LAST_SHA" == "$CURRENT_SHA" ]; then
            echo "decision=true" >> $GITHUB_OUTPUT
          fi

      - id: get-redis
        if: ${{ !inputs.redis-reference }}
        run: echo "tag=$(curl -s https://api.github.com/repos/redis/redis/releases/latest | jq -r '.tag_name')" >> $GITHUB_OUTPUT

  cache-sha:
    # Caches the SHA of the last successful build
    runs-on: ubuntu-latest
    needs: [setup, build-linux-x86, build-linux-arm, build-macos]
    if: ${{ !cancelled() && needs.setup.outputs.store == 'true' && needs.setup.outputs.skip == 'false' }}
    steps:
      - if: ${{ !contains(needs.*.result, 'failure') }}
        id: update-sha
        run: |
          echo "${{ needs.setup.outputs.sha }}" > ${{ env.SHA_CACHE_NAME }}
          echo "updated=true" >> $GITHUB_OUTPUT
      - name: Clear cache
        # `actions/cache/save` can't overwrite an existing cache, so we need to delete it first
        # enspired by https://github.com/actions/cache/issues/342 conversation
        if: ${{ fromJson(steps.update-sha.outputs.updated) }}
        continue-on-error: true # Don't fail if the cache doesn't exist
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh extension install actions/gh-actions-cache
          gh actions-cache delete ${{ env.SHA_CACHE_NAME }} --confirm -R ${{ github.repository }}
      - uses: actions/cache/save@v3
        if: ${{ fromJson(steps.update-sha.outputs.updated) }}
        with:
          path: ${{ env.SHA_CACHE_NAME }}
          key: ${{ env.SHA_CACHE_NAME }}

  decide-linux:
    if: ${{ inputs.platform != 'macos' }}
    uses: ./.github/workflows/task-get-linux-configurations.yml
    with:
      platform: ${{ inputs.platform }}
      architecture: ${{ inputs.architecture }}

  decide-macos:
    runs-on: ubuntu-latest
    if: ${{ contains(fromJson('["macos", "all"]'), inputs.platform) }}
    outputs:
      platforms: ${{ steps.decide.outputs.platforms }}
    steps:
      - id: decide
        shell: python
        run: |
          import os
          platforms = []

          if '${{ inputs.architecture }}' in ['all', 'x86_64']:
            platforms.append('macos-11')
          # if '${{ inputs.architecture }}' in ['all', 'aarch64']:
          #   platforms.append('macos-13-xlarge')

          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            print(f'platforms={platforms}', file=f)

  build-linux-x86:
    needs: [decide-linux, setup]
    if: ${{ contains(fromJson('["x86_64", "all"]'), inputs.architecture) && !fromJson(needs.setup.outputs.skip) }}
    strategy:
      fail-fast: false
      matrix:
        OS: ${{ fromJson(needs.decide-linux.outputs.platforms_x86) }}
        include: ${{ fromJson(needs.decide-linux.outputs.include_x86) }}
    uses: ./.github/workflows/task-build-artifacts.yml
    secrets: inherit
    with:
      container: ${{ matrix.OS }}
      pre-steps-script: ${{ matrix.pre-deps }}
      ref: ${{ inputs.reference }}
      sha: ${{ needs.setup.outputs.sha }}
      redis-ref: ${{ needs.setup.outputs.redis-ref }}

  build-linux-arm:
    needs: [decide-linux, setup]
    if: ${{ contains(fromJson('["aarch64", "all"]'), inputs.architecture) && !fromJson(needs.setup.outputs.skip) }}
    strategy:
      fail-fast: false
      matrix:
        OS: ${{ fromJson(needs.decide-linux.outputs.platforms_arm) }}
        include: ${{ fromJson(needs.decide-linux.outputs.include_arm) }}
    uses: ./.github/workflows/flow-self-hosted-arm.yml
    secrets: inherit
    with:
      build: true
      container: ${{ matrix.OS }}
      pre-steps-script: ${{ matrix.pre-deps }}
      ref: ${{ inputs.reference }}
      sha: ${{ needs.setup.outputs.sha }}
      get-redis: ${{ needs.setup.outputs.redis-ref }}

  build-macos:
    needs: [decide-macos, setup]
    if: ${{ contains(fromJson('["macos", "all"]'), inputs.platform) && !fromJson(needs.setup.outputs.skip) }}
    strategy:
      matrix:
        OS: ${{ fromJson(needs.decide-macos.outputs.platforms) }}
    uses: ./.github/workflows/task-build-artifacts.yml
    secrets: inherit
    with:
      env: ${{ matrix.OS }}
      ref: ${{ inputs.reference }}
      sha: ${{ needs.setup.outputs.sha }}
      redis-ref: ${{ needs.setup.outputs.redis-ref }}
