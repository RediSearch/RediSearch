name: Build on Linux Platforms

# Documentation: https://redislabs.atlassian.net/wiki/spaces/DX/pages/3967844669/RediSearch+CI+refactor

# Keep aligned with the options below
env:
  ALL_IMAGES: "['ubuntu:jammy',
                'ubuntu:bionic',
                'centos:7',
                'rockylinux:8',
                'rockylinux:9',
                'debian:bullseye',
                'amazonlinux:2']"

on:
  workflow_call:
    inputs:
      platform:
        type: string
      architecture:
        type: string
      test-config:
        description: 'Test configuration environment variable (e.g. "CONFIG=tls" or "QUICK=1")'
        type: string
      coordinator:
        type: boolean
        default: true
      standalone:
        type: boolean
        default: true
  workflow_dispatch:
    inputs:
      platform:
        type: choice
        options:
          - all
          - ubuntu:jammy
          - ubuntu:bionic
          - centos:7
          - rockylinux:8
          - rockylinux:9
          - debian:bullseye
          - amazonlinux:2
        description: 'Platform to build on. Use "all" to build on all'
        default: all
      architecture:
        type: choice
        options:
          - all
          - x86_64
          - arm64
        description: 'Architecture to build on. Use "all" to build on all'
        default: all
      coordinator:
        description: 'Whether to run coordinator tests'
        type: boolean
        default: true
      standalone:
        description: 'Whether to run standalone tests'
        type: boolean
        default: true

jobs:
  get-required-envs:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.get_platforms.outputs.platforms }}
      include: ${{ steps.get_platforms.outputs.include }}
    steps:
      - name: Get platform
        id: get_platforms
        shell: python
        run: |
          import os

          platforms = '${{ inputs.platform }}'
          include = []

          if platforms == 'all':
            platforms = ${{ env.ALL_IMAGES }}
          else:
            platforms = [platforms]

          # Special cases:

          # amazonlinux:2 needs pre-checkout dependencies
          if platforms.count('amazonlinux:2') > 0:
            include.append({
              'OS': 'amazonlinux:2',
              'pre-deps': "yum install -y tar gzip"})

          # Serialize the platforms to a string
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            print(f'platforms={platforms}', file=fh)
            print(f'include={include}', file=fh)


  linux-matrix-x86_64:
    if: github.event.inputs.architecture == 'all' || github.event.inputs.architecture == 'x86_64'
    needs: get-required-envs
    strategy:
      matrix:
        OS: ${{ fromJson(needs.get-required-envs.outputs.platforms) }}
        include: ${{ fromJson(needs.get-required-envs.outputs.include) }}
      fail-fast: false
    uses: ./.github/workflows/common-flow-container.yml
    secrets: inherit
    with:
      container: ${{ matrix.OS }}
      pre-steps-script: ${{ matrix.pre-deps }}
      coordinator: ${{ inputs.coordinator }}
      standalone: ${{ inputs.standalone }}
      test-config: ${{ inputs.test-config }}

  linux-matrix-arm64:
    if: github.event.inputs.architecture == 'all' || github.event.inputs.architecture == 'arm64'
    needs: get-required-envs
    strategy:
      matrix:
        OS: ${{ fromJson(needs.get-required-envs.outputs.platforms) }}
        include: ${{ fromJson(needs.get-required-envs.outputs.include) }}
      fail-fast: false
    uses: ./.github/workflows/flow-self-hosted-arm.yml
    secrets: inherit
    with:
      container: ${{ matrix.OS }}
      pre-steps-script: ${{ matrix.pre-deps }}
      coordinator: ${{ inputs.coordinator }}
      standalone: ${{ inputs.standalone }}
      test-config: ${{ inputs.test-config }}
