name: default (common) flow for container runs

# Documentation: https://redislabs.atlassian.net/wiki/spaces/DX/pages/3967844669/RediSearch+CI+refactor

on:
  workflow_call:
    inputs:
      env:
        default: "ubuntu-latest"
        type: string
      container:
        required: true
        type: string
      san:
        type: string
      get-redis:
        type: string
        default: ${{ vars.DEFAULT_REDIS_REF }}
      test-config:
        description: 'Test configuration environment variable (e.g. "CONFIG=tls" or "QUICK=1")'
        required: true
        type: string
      coordinator:
        type: boolean
        default: true
      standalone:
        type: boolean
        default: true
      pre-steps-script:
        type: string
        description: 'Script to run before any other steps (extremely basic dependency needs only)'

env:
  MODE: "" # user mode
  REDISEARCH_MT_BUILD: ${{ vars.REDISEARCH_MT_BUILD }}

jobs:
  common-flow:
    runs-on: ${{ inputs.env }}
    container: ${{ inputs.container }}
# From this point on, this file should be identical to the other common flow.
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    steps:
      - name: Pre-steps Dependencies
        if: inputs.pre-steps-script
        run: ${{ inputs.pre-steps-script }}
      - name: Deps checkout
        uses: actions/checkout@v3
        with:
            sparse-checkout: .install
            path: setup
            set-safe-directory: .. # In preparation for the next full checkout
      - name: Setup
        working-directory: setup/.install
        run: ./install_script.sh ${{ env.MODE }}
      - name: Full checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup (readies)
        run: ./sbin/setup

      - name: Get Redis
        if: inputs.get-redis
        uses: actions/checkout@v3
        with:
          repository: redis/redis
          ref: ${{ inputs.get-redis }}
          path: redis
      - name: Build Redis
        if: inputs.get-redis
        working-directory: redis
        run: ${{ env.MODE }} make install

      - name: Decide if to continue after failure
        id: continue-on-error
        run: |
          if [[ -n "${{ inputs.san }}" ]]; then
            echo "decision=true" >> $GITHUB_OUTPUT
          else
            echo "decision=false" >> $GITHUB_OUTPUT
          fi

      - name: Build Standalone
        if: ${{ inputs.standalone }}
        run: make SAN=${{ inputs.san }}
      - name: Build Coordinator
        if: ${{ inputs.coordinator }}
        run: make COORD=1 SAN=${{ inputs.san }}

      - name: Unit tests (standalone)
        id: test1
        if: ${{ inputs.standalone }}
        continue-on-error: ${{ fromJson(steps.continue-on-error.outputs.decision) }}
        run: make unit-tests LOG=1 CLEAR_LOGS=0 SAN=${{ inputs.san }}
      - name: Flow tests (standalone)
        id: test2
        if: ${{ inputs.standalone }}
        continue-on-error: ${{ fromJson(steps.continue-on-error.outputs.decision) }}
        run: make pytest LOG=1 CLEAR_LOGS=0 SAN=${{ inputs.san }} ${{ inputs.test-config }}
      - name: Unit tests (coordinator)
        id: test3
        if: ${{ inputs.coordinator }}
        continue-on-error: ${{ fromJson(steps.continue-on-error.outputs.decision) }}
        run: make COORD=1 unit-tests LOG=1 CLEAR_LOGS=0 SAN=${{ inputs.san }}
      - name: Flow tests (coordinator)
        id: test4
        if: ${{ inputs.coordinator }}
        continue-on-error: ${{ fromJson(steps.continue-on-error.outputs.decision) }}
        run: make COORD=1 pytest LOG=1 CLEAR_LOGS=0 SAN=${{ inputs.san }} ${{ inputs.test-config }}

      - name: Upload Artifacts
        # skip if all tests passed
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: Test Logs
          path: |
            tests/logs
            tests/pytests/logs/*.log
          if-no-files-found: ignore
      - name: Upload Sanitizer Artifacts
        if: ${{ inputs.san }}
        uses: actions/upload-artifact@v3
        with:
          name: Sanitizer Logs
          path: tests/pytests/logs/*.log.*
          if-no-files-found: ignore

      - name: Fail flow if tests failed
        if: ${{ steps.test1.outcome == 'failure' || steps.test2.outcome == 'failure' || steps.test3.outcome == 'failure' || steps.test4.outcome == 'failure' }}
        run: exit 1
      - name: Fail flow if sanitizer failed
        if: ${{ inputs.san }}
        run: |
          [[ -n "$(ls tests/pytests/logs/*.log.* 2>/dev/null)" ]] && exit 1
