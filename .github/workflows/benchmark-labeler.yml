name: benchmark

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled] # Default ([opened, reopened, synchronize]) + labeled
    branches-ignore:
      - '*docs'
      - '*noci'

jobs:
  get-setup:
    name: Get Benchmark Setup(s)
    runs-on: ubuntu-latest
    outputs:
      setup: ${{ steps.get-setup.outputs.setup }}
      has-setup: ${{ steps.get-setup.outputs.has-setup }}
    steps:
      - name: Check Labels
        id: get-setup
        shell: python
        run: |
          import os
          if '${{ github.event.action }}' == 'labeled':
            # Get labels from event
            labels = ['${{ github.event.label.name }}']
          else:
            # Get labels from PR
            labels = ${{ toJson(github.event.pull_request.labels.*.name) }}

          # Check for specific benchmark types
          if any(l in labels for l in ['benchmarks-all', 'benchmarks']):
            # Run all benchmark types
            labels = ['benchmarks-all']
          else:
            # Only include specific benchmark types
            filtered_labels = []
            if any(l in labels for l in ['benchmarks-rust']):
              filtered_labels.append('benchmarks-rust')
            if any(l in labels for l in ['benchmarks-c', 'benchmarks-c++', 'benchmarks-cpp']):
              filtered_labels.append('benchmarks-c')
            labels = filtered_labels

          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            print(f'setup={labels}', file=f)
            print(f'has-setup={len(labels) > 0}', file=f)

  rust-micro-benchmarks:
    needs: get-setup
    name: Trigger Rust Micro Benchmarks
    if: needs.get-setup.outputs.has-setup == 'True' && (contains(fromJson(needs.get-setup.outputs.setup), 'benchmarks-all') || contains(fromJson(needs.get-setup.outputs.setup), 'benchmarks-rust'))
    strategy:
      matrix:
        setup: ${{ fromJson(needs.get-setup.outputs.setup) }}
    uses: ./.github/workflows/flow-rust-micro-benchmarks.yml
    secrets: inherit

  micro-benchmarks:
    needs: get-setup
    name: Trigger Micro Benchmarks
    if: needs.get-setup.outputs.has-setup == 'True' && (contains(fromJson(needs.get-setup.outputs.setup), 'benchmarks-all') || contains(fromJson(needs.get-setup.outputs.setup), 'benchmarks-c'))
    strategy:
      matrix:
        setup: ${{ fromJson(needs.get-setup.outputs.setup) }}
    uses: ./.github/workflows/flow-micro-benchmarks.yml
    secrets: inherit
