name: Build and Upload Artifacts

on:
  workflow_call:
    inputs:
      env:
        default: "ubuntu-latest"
        type: string
      container:
        type: string
      pre-steps-script:
        type: string
        description: 'Script to run before any other steps (extremely basic dependency needs only)'
      ref:
        type: string
        description: 'RediSearch reference to checkout (defaults to the ref of the triggering event)'
      sha:
        type: string
        description: 'Optional: SHA to checkout. If not provided, `ref` will be used'
      redis-ref:
        type: string

env:
  REF: ${{ inputs.sha || inputs.ref || github.sha }}  # Define fallbacks for ref to checkout
  BRANCH: ${{ inputs.ref || github.ref_name }}        # Define "branch" name for pack name (used in `make pack`)
  BOOST_VERSION: ${{ vars.BOOST_VERSION }}

jobs:
  build:
    name: Build ${{ inputs.container || inputs.env }}
    runs-on: ${{ inputs.env }}
    container: ${{ inputs.container || null }}
    defaults:
      run:
        shell: bash -l -eo pipefail {0}
    env:
      VERBOSE: 1 # For logging
      RELEASE: 0 # We build snapshots. This variable is used in the pack name (see `make pack`)
      # Build command
      BUILD_CMD: echo '::group::Build' && make build VERBOSE= GIT_BRANCH=$BRANCH && echo '::endgroup::'
    steps:
      # Setup
      - name: Pre-steps Dependencies
        if: inputs.pre-steps-script
        run: ${{ inputs.pre-steps-script }}
      - name: Get Installation Mode
        id: mode
        run: |
          [[ -z "${{ inputs.container }}" ]] && echo "mode=sudo" >> $GITHUB_OUTPUT || echo "mode=" >> $GITHUB_OUTPUT
      - name: Deps checkout
        uses: actions/checkout@v3
        with:
          path: setup
          ref: ${{ env.REF }}
          sparse-checkout-cone-mode: false
          sparse-checkout: |
            .install
            tests/pytests/requirements.txt
      - name: Setup specific
        working-directory: setup/.install
        run: ./install_script.sh ${{ steps.mode.outputs.mode }}
      - name: Install aws cli
        working-directory: setup/.install
        run: ./install_aws.sh ${{ steps.mode.outputs.mode }}
      - name: Full checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
          ref: ${{ env.REF }}
      - name: Setup common
        run: .install/common_installations.sh ${{ steps.mode.outputs.mode }}
      - name: install build artifacts req
        run: pip install -q -r .install/build_package_requirments.txt

      - name: Install Boost
        working-directory: .install
        run: ./install_boost.sh ${{ env.BOOST_VERSION }} ${{ steps.mode.outputs.mode }}

      # Get Redis
      - name: Get Redis
        uses: actions/checkout@v3
        with:
          repository: redis/redis
          ref: ${{ inputs.redis-ref }}
          path: redis
      - name: Build Redis
        working-directory: redis
        run: ${{ steps.mode.outputs.mode }} make install

      # Build & Pack
      - name: Build and Pack RediSearch OSS
        env:
          REDISEARCH_MT_BUILD: 0
        run: ${{ env.BUILD_CMD }} && make pack
      - name: Build and Pack RediSearch Lite
        env:
          REDISEARCH_MT_BUILD: 1
          LITE: 1
        run: ${{ env.BUILD_CMD }} && make pack
      - name: Build and Pack RediSearch Enterprise
        env:
          REDISEARCH_MT_BUILD: 1
          COORD: rlec
        run: ${{ env.BUILD_CMD }} && make pack

      # Upload
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.ARTIFACT_UPLOAD_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ARTIFACT_UPLOAD_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.ARTIFACT_UPLOAD_AWS_REGION }}
      - name: Upload Artifacts
        run: make upload-artifacts
