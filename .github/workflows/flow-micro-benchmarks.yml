name: Run a Micro Benchmark Flow

on:
  workflow_call:

jobs:
  benchmarks:
    runs-on: ${{ vars.RUNS_ON || 'ubuntu-latest' }}
    env:
      RUST_BACKTRACE: full
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Setup specific
        working-directory: .install
        run: ./install_script.sh sudo
      - name: Build RediSearch
        run: ./build.sh  
      # Step to fetch the latest artifact from master
      - name: Get Latest Baseline Artifact URL
        id: get-artifact-url
        if: github.event_name == 'pull_request'
        run: |
          # Get workflow ID for flow-micro-benchmarks.yml
          WORKFLOW_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/flow-micro-benchmarks.yml")
          echo "Workflow API Response: $WORKFLOW_RESPONSE"
          WORKFLOW_ID=$(echo "$WORKFLOW_RESPONSE" | jq -r '.id')
          echo "Workflow ID: $WORKFLOW_ID"
          
          # Fetch the 50 most recent commits on master
          COMMITS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/commits?sha=master&per_page=50" \
            | jq -r '.[].sha')
          
          ARTIFACT_URL=""
          for COMMIT_SHA in $COMMITS; do
            RUN_RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs?head_sha=$COMMIT_SHA&status=success&workflow_id=$WORKFLOW_ID")
            ARTIFACT_URL=$(echo "$RUN_RESPONSE" | jq -r '.workflow_runs[0].artifacts_url' \
              | xargs -I {} curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github+json" {} \
              | jq -r '.artifacts[] | select(.name == "rust-benchmark-results-master") | .archive_download_url')
            if [ -n "$ARTIFACT_URL" ]; then
              echo "Found artifact for commit $COMMIT_SHA: $ARTIFACT_URL"
              break
            fi
          done
          
          echo "artifact-url=$ARTIFACT_URL" >> $GITHUB_OUTPUT
          if [ -z "$ARTIFACT_URL" ]; then
            echo "No artifact found for rust-benchmark-results-master in the last 50 commits"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Debug GITHUB_OUTPUT and artifact-url
        if: github.event_name == 'pull_request'
        run: |
          echo "Contents of GITHUB_OUTPUT:"
          cat $GITHUB_OUTPUT
          echo "Value of artifact-url: ${{ steps.get-artifact-url.outputs.artifact-url }}"
        continue-on-error: true

      - name: Download Latest Baseline Artifact
        id: download-baseline
        if: github.event_name == 'pull_request' && steps.get-artifact-url.outputs.artifact-url != ''
        run: |
          curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "${{ steps.get-artifact-url.outputs.artifact-url }}" -o rust-benchmark-results-master.zip
          unzip rust-benchmark-results-master.zip -d bin/redisearch_rs/criterion
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true
      - name: Check if Baseline Exists
        id: check_baseline
        run: |
          if [ -d bin/redisearch_rs/criterion ]; then
            echo "baseline_exists=true" >> $GITHUB_OUTPUT
          else
            echo "baseline_exists=false" >> $GITHUB_OUTPUT
          fi
      - name: Run benchmark on PR with baseline from master
        if: github.event_name == 'pull_request' && steps.check_baseline.outputs.baseline_exists == 'true'
        run: cargo bench --workspace -- --baseline master
        working-directory: src/redisearch_rs
      - name: Run benchmark on PR without baseline
        if: github.event_name == 'pull_request' && steps.check_baseline.outputs.baseline_exists == 'false'
        run: cargo bench --workspace
        working-directory: src/redisearch_rs
      - name: Run benchmark on master
        if: github.ref == 'refs/heads/master' && github.event_name == 'push' && success()
        run: cargo bench --workspace -- --save-baseline master
        working-directory: src/redisearch_rs

      - name: Upload rust baseline benchmarks for master
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: "rust-benchmark-results-master"
          path: bin/redisearch_rs/criterion
      - name: Upload benchmarks for PR comparison
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: "rust-benchmark-results-pr-${{ github.event.pull_request.number }}"
          path: bin/redisearch_rs/criterion
