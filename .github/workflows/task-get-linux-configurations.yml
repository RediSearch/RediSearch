name: Get Linux Configurations

# Documentation: https://redislabs.atlassian.net/wiki/spaces/DX/pages/3967844669/RediSearch+CI+refactor

env:
  ALL_X86_IMAGES: "['ubuntu:noble',
                    'ubuntu:jammy',
                    'ubuntu:focal',
                    'ubuntu:bionic',
                    'rockylinux:8',
                    'rockylinux:9',
                    'debian:bullseye',
                    'gcc:12-bookworm',
                    'amazonlinux:2',
                    'amazonlinux:2023',
                    'mcr.microsoft.com/cbl-mariner/base/core:2.0']"
  ALL_ARM_IMAGES: "['ubuntu:noble',
                    'ubuntu:jammy',
                    'ubuntu:focal',
                    'ubuntu:bionic',
                    'rockylinux:8',
                    'debian:bullseye',
                    'gcc:12-bookworm',
                    'amazonlinux:2023']"

on:
  workflow_call:
    inputs:
      platform:
        type: string
        default: all
      architecture:
        type: string
        default: all
    outputs:
      platforms_arm:
        value: ${{ jobs.get-required-envs.outputs.platforms_arm }}
      platforms_x86:
        value: ${{ jobs.get-required-envs.outputs.platforms_x86 }}
      include_arm:
        value: ${{ jobs.get-required-envs.outputs.include_arm }}
      include_x86:
        value: ${{ jobs.get-required-envs.outputs.include_x86 }}

jobs:
  get-required-envs:
    name: for ${{ inputs.platform }} platform on ${{ inputs.architecture }} architecture
    runs-on: ubuntu-latest
    outputs:
      platforms_arm: ${{ steps.get_platforms.outputs.arm_platforms }}
      platforms_x86: ${{ steps.get_platforms.outputs.x86_platforms }}
      include_arm: ${{ steps.get_platforms.outputs.arm_include }}
      include_x86: ${{ steps.get_platforms.outputs.x86_include }}
    steps:
      - name: Get platform
        id: get_platforms
        shell: python
        run: |
          import os

          requested_platform = '${{ inputs.platform }}'
          requested_arch = '${{ inputs.architecture }}'
          all_x86_images = ${{ env.ALL_X86_IMAGES }}
          all_arm_images = ${{ env.ALL_ARM_IMAGES }}

          x86_platforms = []
          arm_platforms = []
          def needs_arch(arch):
            return requested_arch in ['all', arch]

          naming = {
            'mariner:2': 'mcr.microsoft.com/cbl-mariner/base/core:2.0',
            'debian:bookworm': 'gcc:12-bookworm',
          }

          # Normalize the platform name
          requested_platform = naming.get(requested_platform, requested_platform)

          # Get the platforms to build on (set `x86_platforms` and `arm_platforms`)
          if requested_platform == 'all':
            x86_platforms = all_x86_images if needs_arch('x86_64')  else []
            arm_platforms = all_arm_images if needs_arch('aarch64') else []
          else:
            if requested_platform in all_x86_images and needs_arch('x86_64'):
              x86_platforms = [requested_platform]
            if requested_platform in all_arm_images and needs_arch('aarch64'):
              arm_platforms = [requested_platform]

          # Generate warnings/errors if requested combination is not supported
          if requested_platform != 'all':
            title = 'Unsupported Combination'
            if (requested_arch == 'x86_64'  and requested_platform not in x86_platforms) or \
               (requested_arch == 'aarch64' and requested_platform not in arm_platforms):
              print(f"::error title={title}::Requested platform {requested_platform} is not supported on {requested_arch}")
              exit(1)
            if requested_arch == 'all':
              if requested_platform not in x86_platforms + arm_platforms:
                print(f"::error title={title}::Requested platform {requested_platform} is not supported on any architecture")
                exit(1)
              elif requested_platform not in arm_platforms or requested_platform not in x86_platforms:
                unsupported_arch = 'aarch64' if requested_platform not in arm_platforms else 'x86_64'
                print(f"::warning title={title}::Requested platform {requested_platform} is not supported on {unsupported_arch}. Skipping {unsupported_arch}")

          # Special cases:
          arm_include = []
          x86_include = []

          # amazonlinux:2 needs pre-checkout dependencies
          if 'amazonlinux:2' in x86_platforms:
            x86_include.append({
              'OS': 'amazonlinux:2',
              'pre-deps': "yum install -y tar gzip"})

          # amazonlinux:2023 needs pre-checkout dependencies
          if 'amazonlinux:2023' in x86_platforms: 
            x86_include.append({
              'OS': 'amazonlinux:2023',
              'pre-deps': "dnf install -y tar gzip"})
          if 'amazonlinux:2023' in arm_platforms:
            arm_include.append({
              'OS': 'amazonlinux:2023',
              'pre-deps': "dnf install -y tar gzip"})

          # mariner:2 needs pre-checkout dependencies
          if 'mcr.microsoft.com/cbl-mariner/base/core:2.0' in x86_platforms:
            x86_include.append({
              'OS': 'mcr.microsoft.com/cbl-mariner/base/core:2.0',
              'pre-deps': "tdnf install -y --noplugins --skipsignature tar gzip"})

          # Serialize the platforms to a string
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            print(f'arm_platforms={arm_platforms}', file=fh)
            print(f'x86_platforms={x86_platforms}', file=fh)
            print(f'arm_include={arm_include}', file=fh)
            print(f'x86_include={x86_include}', file=fh)
