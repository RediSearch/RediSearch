name: Generate Test Matrix Configurations

# This workflow generates matrix configurations for all platforms
# Can be used by merge-queue, linux-platforms, macos, and other workflows

on:
  workflow_call:
    inputs:
      platforms:
        description: 'Comma-separated list of platforms to include (macos,linux-x86,linux-arm,sanitizer,coverage)'
        type: string
        default: 'all'
      platform:
        description: 'Specific platform to filter (e.g., ubuntu:noble, mariner:2, all). Overrides platforms input.'
        type: string
        default: ''
      architecture:
        description: 'Architecture filter for Linux platforms (all,x86_64,aarch64)'
        type: string
        default: 'all'
      include-coverage:
        description: 'Whether to include coverage configuration'
        type: boolean
        default: true
      include-sanitizer:
        description: 'Whether to include sanitizer configuration'
        type: boolean
        default: true
    outputs:
      matrix:
        description: "Complete matrix configuration as JSON"
        value: ${{ jobs.generate-matrix.outputs.matrix }}
      matrix-count:
        description: "Number of matrix jobs"
        value: ${{ jobs.generate-matrix.outputs.matrix-count }}

env:
  # Linux container images
  ALL_X86_IMAGES: "['ubuntu:noble',
                    'ubuntu:jammy',
                    'ubuntu:focal',
                    'rockylinux:8',
                    'rockylinux:9',
                    'gcc:11-bullseye',
                    'gcc:12-bookworm',
                    'amazonlinux:2',
                    'amazonlinux:2023',
                    'mcr.microsoft.com/cbl-mariner/base/core:2.0',
                    'mcr.microsoft.com/azurelinux/base/core:3.0',
                    'alpine:3']"
  ALL_ARM_IMAGES: "['ubuntu:noble',
                    'ubuntu:jammy',
                    'ubuntu:focal',
                    'rockylinux:8',
                    'rockylinux:9',
                    'gcc:11-bullseye',
                    'gcc:12-bookworm',
                    'amazonlinux:2023',
                    'mcr.microsoft.com/azurelinux/base/core:3.0',
                    'alpine:3']"

jobs:
  generate-matrix:
    name: Generate test matrix for ${{ inputs.platforms }}
    runs-on: ${{ vars.RUNS_ON || 'ubuntu-latest' }}
    outputs:
      matrix: ${{ steps.generate.outputs.matrix }}
      matrix-count: ${{ steps.generate.outputs.matrix-count }}
    steps:
      - name: Generate matrix configuration
        id: generate
        shell: python
        run: |
          import os
          import json
          import sys

          # Input parameters
          requested_platforms = '${{ inputs.platforms }}'.split(',') if '${{ inputs.platforms }}' != 'all' else ['macos', 'linux-x86', 'linux-arm', 'sanitizer', 'coverage']
          specific_platform = '${{ inputs.platform }}'.strip()
          requested_arch = '${{ inputs.architecture }}'
          include_coverage = '${{ inputs.include-coverage }}' == 'true'
          include_sanitizer = '${{ inputs.include-sanitizer }}' == 'true'

          # If specific platform is provided, auto-determine platform types
          if specific_platform and specific_platform != 'all':
              if specific_platform == 'macos':
                  requested_platforms = ['macos']
              else:
                  # Assume it's a Linux platform, include both x86 and ARM
                  requested_platforms = ['linux-x86', 'linux-arm']

          # Linux container images (from environment variables)
          # Parse the environment variables as JSON-like strings
          def parse_image_list(env_var):
              """Parse environment variable containing a list of container images"""
              raw_value = os.environ[env_var]
              # Remove the outer brackets and split by comma
              # Handle both single and double quotes
              raw_value = raw_value.strip().strip('[]')
              images = []
              for item in raw_value.split(','):
                  item = item.strip().strip('\'"')
                  if item:  # Skip empty items
                      images.append(item)
              return images

          X86_IMAGES = parse_image_list('ALL_X86_IMAGES')
          ARM_IMAGES = parse_image_list('ALL_ARM_IMAGES')

          # Pre-dependency scripts mapping
          PRE_DEPS_MAP = {
              'amazonlinux:2': "yum install -y tar gzip git",
              'amazonlinux:2023': "dnf install -y tar gzip git",
              'mcr.microsoft.com/cbl-mariner/base/core:2.0': "tdnf install -y --noplugins --skipsignature tar gzip git ca-certificates",
              'mcr.microsoft.com/azurelinux/base/core:3.0': "tdnf install -y --noplugins tar git ca-certificates",
              'alpine:3': "apk add bash git",
              'ubuntu:noble': "apt update && apt install -y git",
              'ubuntu:jammy': "apt update && apt install -y git",
              'ubuntu:focal': "apt update && apt install -y git",
              'gcc:12-bookworm': "apt update && apt install -y git",
              'gcc:11-bullseye': "apt update && apt install -y git",
              'rockylinux:8': "dnf update -y && dnf install -y git",
              'rockylinux:9': "dnf update -y && dnf install -y git"
          }

          # ARM-specific overrides
          ARM_PRE_DEPS_OVERRIDE = {
              'alpine:3': "apk add bash gcompat libstdc++ libgcc git"
          }

          arm_runner = '${{ vars.RUNS_ON_ARM }}' or 'ubuntu24-arm64-2-8'
          matrix_include = []

          # Platform name aliases
          platform_aliases = {
              'mariner:2': 'mcr.microsoft.com/cbl-mariner/base/core:2.0',
              'azurelinux:3': 'mcr.microsoft.com/azurelinux/base/core:3.0',
              'debian:bookworm': 'gcc:12-bookworm',
              'debian:bullseye': 'gcc:11-bullseye'
          }

          # Handle specific platform filtering (like original workflow)
          if specific_platform and specific_platform != 'all':
              # Normalize platform name
              normalized_platform = platform_aliases.get(specific_platform, specific_platform)

              # Check if platform exists in original lists
              in_x86 = normalized_platform in X86_IMAGES
              in_arm = normalized_platform in ARM_IMAGES

              # Validate platform exists
              if not in_x86 and not in_arm:
                  print(f"::error title=Unsupported Platform::Platform {specific_platform} is not supported")
                  sys.exit(1)

              # Show warnings/errors for architecture-specific requests
              if requested_arch == 'x86_64' and not in_x86:
                  print(f"::error title=Unsupported Combination::Platform {specific_platform} is not supported on x86_64")
                  sys.exit(1)
              elif requested_arch == 'aarch64' and not in_arm:
                  print(f"::error title=Unsupported Combination::Platform {specific_platform} is not supported on aarch64")
                  sys.exit(1)
              elif requested_arch == 'all':
                  if not in_arm:
                      print(f"::warning title=Partial Support::Platform {specific_platform} is not supported on aarch64. Skipping aarch64")
                  elif not in_x86:
                      print(f"::warning title=Partial Support::Platform {specific_platform} is not supported on x86_64. Skipping x86_64")

              # Filter images based on platform and architecture
              if in_x86 and requested_arch in ['all', 'x86_64']:
                  X86_IMAGES = [normalized_platform]
              else:
                  X86_IMAGES = []

              if in_arm and requested_arch in ['all', 'aarch64']:
                  ARM_IMAGES = [normalized_platform]
              else:
                  ARM_IMAGES = []

          # macOS configurations (respect architecture filter)
          if 'macos' in requested_platforms:
              if requested_arch in ['all', 'x86_64']:
                  matrix_include.append({'platform': 'macos', 'name': 'macOS Intel', 'env': 'macos-15-intel', 'container': '', 'pre-steps-script': ''})
              if requested_arch in ['all', 'aarch64']:
                  matrix_include.append({'platform': 'macos', 'name': 'macOS M1', 'env': 'macos-latest', 'container': '', 'pre-steps-script': ''})

          # Sanitizer configuration
          if 'sanitizer' in requested_platforms and include_sanitizer:
              matrix_include.append({
                  'platform': 'sanitizer', 'name': 'Address Sanitizer',
                  'env': 'ubuntu-latest', 'san': 'address', 'container': '', 'pre-steps-script': ''
              })

          # Coverage configuration
          if 'coverage' in requested_platforms and include_coverage:
              matrix_include.append({
                  'platform': 'coverage', 'name': 'Coverage',
                  'env': 'ubuntu-latest', 'coverage': True, 'container': '', 'pre-steps-script': ''
              })

          # Linux x86_64 configurations
          if 'linux-x86' in requested_platforms and requested_arch in ['all', 'x86_64']:
              for image in X86_IMAGES:
                  name_parts = image.split(':')
                  friendly_name = f"{name_parts[0].split('/')[-1].title()} {name_parts[1].title()}" if len(name_parts) > 1 else name_parts[0].split('/')[-1].title()

                  config = {
                      'platform': 'linux-x86', 'name': f'{friendly_name} x86_64',
                      'env': 'ubuntu-latest', 'container': image
                  }
                  if image in PRE_DEPS_MAP:
                      config['pre-steps-script'] = PRE_DEPS_MAP[image]
                  matrix_include.append(config)

          # Linux aarch64 configurations
          if 'linux-arm' in requested_platforms and requested_arch in ['all', 'aarch64']:
              for image in ARM_IMAGES:
                  name_parts = image.split(':')
                  friendly_name = f"{name_parts[0].split('/')[-1].title()} {name_parts[1].title()}" if len(name_parts) > 1 else name_parts[0].split('/')[-1].title()

                  config = {
                      'platform': 'linux-arm', 'name': f'{friendly_name} aarch64',
                      'env': arm_runner, 'container': image
                  }
                  pre_deps = ARM_PRE_DEPS_OVERRIDE.get(image, PRE_DEPS_MAP.get(image))
                  if pre_deps:
                      config['pre-steps-script'] = pre_deps
                  matrix_include.append(config)

          # Create final matrix and output
          matrix = {'include': matrix_include}
          matrix_json = json.dumps(matrix, separators=(',', ':'))
          matrix_count = len(matrix_include)

          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
              print(f'matrix={matrix_json}', file=fh)
              print(f'matrix-count={matrix_count}', file=fh)

          print(f"Generated matrix with {matrix_count} configurations:")
          for i, config in enumerate(matrix_include, 1):
              print(f"  {i}. {config['name']} ({config.get('platform', 'unknown')})")
