name: Common Test Previous steps
description: 'Common steps for all tests'
inputs:
  env:
    default: ubuntu-latest
    type: string
  container:
    type: string
  san:
    type: string
  coverage:
    type: boolean
    default: false
  get-redis:
    type: string
  test-config:
    description: 'Test configuration environment variable (e.g. "CONFIG=tls" or "QUICK=1")'
    required: true
    type: string
  coordinator:
    type: boolean
    default: true
  standalone:
    type: boolean
    default: true
  pre-steps-script:
    type: string
    description: 'Script to run before any other steps (extremely basic dependency needs only)'
  rejson:
    type: boolean
    default: true
    description: 'Enable tests with RedisJSON'
  rejson-branch:
    type: string
    default: master
    description: 'Branch to use when building RedisJSON for tests'
  test-timeout:
    type: number
    default: 50

runs:
  using: "composite"
  steps:
    # Set environment variables that were previously in the env section
    - name: Set environment variables
      shell: bash
      run: |
        # Convert boolean inputs to numeric values
        if [[ "${{ inputs.rejson }}" == "true" ]]; then
          echo "REJSON=1" >> $GITHUB_ENV
        else
          echo "REJSON=0" >> $GITHUB_ENV
        fi

        if [[ "${{ inputs.coverage }}" == "true" ]]; then
          echo "COV=1" >> $GITHUB_ENV
        else
          echo "COV=0" >> $GITHUB_ENV
        fi

        # Set other environment variables
        echo "VERBOSE_UTESTS=1" >> $GITHUB_ENV
        echo "RUSTFLAGS=-D warnings" >> $GITHUB_ENV
        echo "RUST_BACKTRACE=full" >> $GITHUB_ENV

    # Split to alpine and non-alpine due to different default shells, once the dependency installation is done, we can use the same shell in the rest of the flow
    - name: Pre-steps Dependencies (Alpine)
      if: inputs.pre-steps-script && inputs.container == 'alpine:3'
      shell: sh -l -eo pipefail {0}
      run: ${{ inputs.pre-steps-script }}
    - name: Pre-steps Dependencies (Non-Alpine)
      if: inputs.pre-steps-script && inputs.container != 'alpine:3'
      shell: bash
      run: ${{ inputs.pre-steps-script }}
    - name: Enable dynamic linking to C runtime in Alpine
      if: inputs.container == 'alpine:3'
      shell: bash
      run: echo RUST_DYN_CRT=1 >> $GITHUB_ENV
    - name: Get Installation Mode
      id: mode
      shell: bash
      run: |
        [[ -z "${{ inputs.container }}" ]] && echo "mode=sudo" >> $GITHUB_OUTPUT || echo "mode=" >> $GITHUB_OUTPUT
    - name: Setup
      working-directory: .install
      shell: bash
      run: |
        ./install_script.sh ${{ steps.mode.outputs.mode }}
    - name: Setup tests dependencies
      shell: bash
      run: |
        .install/test_deps/common_installations.sh ${{ steps.mode.outputs.mode }}
    - name: Install LLVM for sanitizer
      if: inputs.san == 'address'
      shell: bash
      working-directory: .install
      run: |
        ./install_llvm.sh ${{ steps.mode.outputs.mode }}
        CLANG_BIN=$(find /usr/bin /usr/local/bin -name "clang-[0-9]*" 2>/dev/null | sort -V | tail -1)
        CLANG_VERSION=$(basename $CLANG_BIN | sed 's/clang-//')
        echo "Using LLVM version: $CLANG_VERSION"
        echo "CC=$CLANG_BIN" >> $GITHUB_ENV
        echo "CXX=$(dirname $CLANG_BIN)/clang++-$CLANG_VERSION" >> $GITHUB_ENV
        echo "LD=$CLANG_BIN" >> $GITHUB_ENV

    - name: Build Redis
      shell: bash
      working-directory: redis
      run:  ${{ steps.mode.outputs.mode }} make install
            BUILD_TLS=yes
            SANITIZER=${{ inputs.san }}

    - name: Set Artifact Names
      # Artifact names have to be unique, so we base them on the environment.
      # We also remove invalid characters from the name.
      id: artifact-names
      shell: bash
      run: | # Invalid characters include: Double quote ", Colon :, Less than <, Greater than >, Vertical bar |, Asterisk *, Question mark ?
        echo "name=$(echo "${{ format('{0}', inputs.san == 'address' && 'sanitizer' || '') }} \
                            ${{ format('{0}', inputs.coverage && 'coverage test' || '') }} \
                            ${{ inputs.container || inputs.env }} ${{ runner.arch }} - Redis ${{ inputs.get-redis || 'unstable' }}" | \
                      sed -e 's/[":\/\\<>\|*?]/_/g' -e 's/__*/_/g' -e 's/^_//' -e 's/_$//')" >> $GITHUB_OUTPUT
    - name: Build
      shell: bash
      env:
        SAN: ${{ inputs.san }}
        REDIS_VER: ${{ inputs.get-redis }}
        ENABLE_ASSERT: 1
      run: ./build.sh TESTS
