#!/bin/bash

set -e

PROGNAME="${BASH_SOURCE[0]}"
HERE="$(cd "$(dirname "$PROGNAME")" &>/dev/null && pwd)"
ROOT=$(cd "$HERE/.." && pwd)
GET_PLATFORM="$ROOT/sbin/get-platform"

# Removed READIES dependency
# Define a simple error printing function
eprint() { >&2 echo "$@"; }

print_help() {
    cat <<-END
Usage: upload-artifacts [--help|help] artifacts...

Uploads packages to S3.

Argument variables:
  NOP=1         No operation (dry-run)
  VERBOSE=1     Show artifact details
  FORECE=1     Force upload even if not in CI
  HELP=1        Show help
END
}

#----------------------------------------------------------------------------------------------

if [[ $1 == --help || $1 == help || $HELP == 1 ]]; then
    print_help
    exit 0
fi

ARCH=$($GET_PLATFORM --arch)
[[ $ARCH == x64 ]] && ARCH=x86_64
[[ $ARCH == arm64v8 ]] && ARCH=aarch64

OS=$($GET_PLATFORM --os)
[[ $OS == linux ]] && OS=Linux

OSNICK=$($GET_PLATFORM --version-artifact)

PLATFORM="$OS-$OSNICK-$ARCH"
echo "Detected OS: $OS"
echo "Detected OSNICK: $OSNICK"
echo "Detected ARCH: $ARCH"
echo "Detected PLATFORM: $PLATFORM"

OP=""
[[ $NOP == 1 ]] && OP=echo
S3_URL=s3://redismodules


if [[ -z $GITHUB_ACTIONS && $FORCE != 1 ]]; then
    eprint "Cannot upload outside of GitHub Actions. Override with FORCE=1."
    exit 1
fi

if [[ -z $AWS_ACCESS_KEY_ID || -z $AWS_SECRET_ACCESS_KEY ]]; then
	eprint "No credentials for S3 upload."
	exit 1
fi


#----------------------------------------------------------------------------------------------
# Navigate to artifacts directory
cd "$ROOT/bin"
MAYBE_SNAP="/snapshots"

cd "artifacts${MAYBE_SNAP}"
if [[ $VERBOSE == 1 ]]; then
    if [[ $OSNICK == alpine3 ]]; then
        du -ah *
    else
        du -ah --apparent-size *
    fi
fi

#----------------------------------------------------------------------------------------------
# S3 Upload Functions

s3_upload_file() {
    local file="$1"
    local s3_dir="$2"
    [[ $s3_dir != */ ]] && s3_dir="${s3_dir}/"
    
    echo "::group::S3_Uploading $file to $s3_dir"
    $OP aws s3 cp "$file" "$s3_dir" --acl public-read --no-progress

    # Verify the file was uploaded
    local file_name=$(basename "$file")
    if $OP aws s3 ls "${s3_dir}${file_name}" > /dev/null 2>&1; then
        echo "File $file_name successfully uploaded to $s3_dir"
    else
        eprint "Error: File $file_name was not found in $s3_dir after upload"
        echo "::endgroup::"
        return 1
    fi
    echo "::endgroup::"
}

s3_upload() {
    # Parameters:
    #   $1: file_prefix - Prefix of files to upload (e.g., "redisearch")
    #   $2: product_name - Product folder name in S3 (e.g., "redisearch")
    local file_prefix="$1"
    local product_name="$2"
    
    if [[ -z "$file_prefix" || -z "$product_name" ]]; then
        eprint "Error: Missing required parameters"
        eprint "Usage: s3_upload <file_prefix> <product_name>"
        return 1
    fi
    
    local upload_dir="${S3_URL}/${product_name}${MAYBE_SNAP}"
    local files file
    
    # print the current folder name
    shopt -s nullglob
    files=(${file_prefix}.*${PLATFORM}*.zip)
    shopt -u nullglob
    echo "Found files: ${files[@]}"
    if [[ ${#files[@]} -eq 0 ]]; then
        echo "      Warning: No files found matching pattern: ${file_prefix}.*${PLATFORM}*.zip"
        return 0
    fi
    
    for file in "${files[@]}"; do
        s3_upload_file "$file" "$upload_dir"
    done
    echo "Upload complete for $upload_dir/$file"
}

#----------------------------------------------------------------------------------------------
# Main upload actions
s3_upload "redisearch" "redisearch"
s3_upload "redisearch-light" "redisearch"
s3_upload "redisearch-community" "redisearch-oss"
