#!/bin/bash

PROGNAME="${BASH_SOURCE[0]}"
HERE="$(cd "$(dirname "$PROGNAME")" &>/dev/null && pwd)"
ROOT=$(cd $HERE/.. && pwd)
READIES=$ROOT/deps/readies
. $READIES/shibumi/defs

if [[ $1 == --help || $1 == help || $HELP == 1 ]]; then
	cat <<-END
		Get RedisJSON module binaries

		get-redisjson [--help|help]

		Argument variables:
		OSNICK=nick        Get binaries for given `nick`
		BRANCH=name        Use given branch
		HDT=1              Download JSON/HDT
		REPO_PATH=dir      Get binary artifacts from given repo `dir`
		BINROOT=dir        On Build, place module .so in `dir`/RedisJSON
		BUILD=0            Do not build if unable to download
		FORCE=1            Download module even if already present
		MODULE_FILE=file   Write module path into `file`
		NOP=1              No operation
		HELP=1             Show help

	END
	exit 0
fi

BRANCH=${BRANCH:-master}

OP=""
[[ $NOP == 1 ]] && OP=echo

os="$($READIES/bin/platform --os)"
arch="$($READIES/bin/platform --arch)"

if [[ ! -z $REPO_PATH ]]; then
	platform="$($READIES/bin/platform -t)"
else
	if [[ $os != linux && $os != macos ]]; then
		if [[ BUILD == 0 ]]; then
			eprint "Cannot match binary artifacts - build RedisJSON and set REPO_PATH"
			exit 1
		fi
		echo "Cannot match binary artifacts - building RedisJSON from source."
		$ROOT/sbin/build-redisjson
		exit $?
	fi

	dist="$($READIES/bin/platform --dist)"
	nick="$($READIES/bin/platform --osnick)"

	[[ $os == linux ]] && os=Linux
	[[ $arch == x64 ]] && arch=x86_64
	
	if [[ $dist == "ubuntu" ]]; then
		if [[ $nick == "focal" ]]; then
			nick="ubuntu20.04"
		elif [[ $nick == "bionic" ]]; then
			nick="ubuntu18.04"
		elif [[ $nick == "xenial" ]]; then
			nick="ubuntu16.04"
		elif [[ $nick == "trusty" ]]; then
			nick="ubuntu14.04"
		else
			nick="ubuntu18.04"
		fi
	elif [[ $dist == debian ]]; then
		if [[ $nick != "bullseye" ]]; then
			nick=ubuntu18.04
		fi
	elif [[ $dist == centos || $dist == redhat || $dist == fedora || $dist == rocky ]]; then
		if [[ $nick == "centos8" || $nick == "rocky8" ]]; then
			nick="rhel8"
		else
			nick="rhel7"
		fi
	elif [[ ! -z $OSNICK ]]; then
		nick=$OSNICK
	fi
	platform="${os}-${nick}-${arch}"
fi

if [[ $HDT == 1 ]]; then
	STEM=rejson-hdt
else
	STEM=rejson
fi
MOD_S3_URL="http://redismodules.s3.amazonaws.com/${STEM}/snapshots"
MOD_RAMP="${STEM}.${platform}.$BRANCH.zip"

DEST_REJSON_DIR="$ROOT/bin/$($READIES/bin/platform -t)/RedisJSON"

if [[ -n $MODULE_FILE ]]; then
	echo "${DEST_REJSON_DIR}/rejson.so" > $MODULE_FILE
fi

if [[ $FORCE != 1 && -d $DEST_REJSON_DIR && -f $DEST_REJSON_DIR/rejson.so ]]; then
	echo "RedisJSON is in ${DEST_REJSON_DIR}:"
	$OP du -ah --apparent-size $DEST_REJSON_DIR
	exit 0
fi

$OP mkdir -p $(dirname $DEST_REJSON_DIR)
WORK_DIR=$(mktemp -d /tmp/rejson.XXXXXX)

if [[ -z $REPO_PATH ]]; then
	F_MOD_RAMP="$WORK_DIR/$MOD_RAMP"
	if [[ $FORCE == 1 || ! -f $F_MOD_RAMP ]]; then
		echo "Download RedisJSON [$MOD_S3_URL/$MOD_RAMP] ..."
		$OP wget -q -P $WORK_DIR $MOD_S3_URL/$MOD_RAMP
		if [[ $NOP != 1 && $? != 0 ]]; then
			if [[ BUILD == 0 ]]; then
				eprint "Cannot download binary artifacts - build RedisJSON and set REPO_PATH"
				exit 1
			fi
			echo "Cannot download binary artifacts - building RedisJSON from source."
			$ROOT/sbin/build-redisjson
			exit $?
		fi
	fi
else
	F_MOD_RAMP="${REPO_PATH}/artifacts/snapshots/${MOD_RAMP}"
	if [[ ! -f $F_MOD_RAMP ]]; then
		eprint "$F_MOD_RAMP is missing - build RedisJSON and set REPO_PATH"
		exit 1
	fi
fi

$OP unzip -q $F_MOD_RAMP -d $WORK_DIR
if [[ -e ${DEST_REJSON_DIR} ]]; then
	echo "Removing existing ${DEST_REJSON_DIR}"
	$OP rm -rf ${DEST_REJSON_DIR}
fi
# $OP mv $WORK_DIR $DEST_REJSON_DIR
$OP rsync -a --no-owner --no-group --remove-source-files $WORK_DIR/* $DEST_REJSON_DIR

echo "RedisJSON installed into ${DEST_REJSON_DIR}:"
if [[ $os == linux ]]; then
	$OP du -ah --apparent-size $DEST_REJSON_DIR
else
	$OP du -ah $DEST_REJSON_DIR
fi
