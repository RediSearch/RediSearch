#!/bin/bash

#------------------------------------------------------------------------------
# RediSearch Unit Tests Runner
#
# This script runs unit tests for the RediSearch project. It supports running
# all unit tests with options for debugging and sanitizer support.
#
# Author: RediSearch Team
#------------------------------------------------------------------------------

# Get script location and set up paths
PROGNAME="${BASH_SOURCE[0]}"
SCRIPT_DIR="$(cd "$(dirname "$PROGNAME")" &>/dev/null && pwd)"
ROOT_DIR=$(cd $SCRIPT_DIR/.. && pwd)

cd $SCRIPT_DIR

#------------------------------------------------------------------------------
# Print separator line for better readability
#------------------------------------------------------------------------------
print_separator() {
    local cols=80
    # Try to get terminal width
    if command -v tput >/dev/null 2>&1; then
        cols=$(tput cols 2>/dev/null || echo 80)
    fi
    printf "\n%s\n" "$(printf '%0.s-' $(seq 1 $((cols-1))))"
}

#------------------------------------------------------------------------------
# Display help information
#------------------------------------------------------------------------------
show_help() {
    cat <<'END'
        Run unit tests

        [ARGVARS...] unit-tests [--help|help]

        Argument variables:
        BINROOT=path   Path to repo binary root dir
        TEST=name      Operate in single-test mode

        TEST_LEAK=1    Run test that leaks (for sanitizer diagnostics)

        VERBOSE=1      Print commands and Redis output
        HELP=1         Show help
END
}

#------------------------------------------------------------------------------
# Configure sanitizer options for memory error detection
#------------------------------------------------------------------------------
setup_sanitizer() {
    if [[ -n $SAN ]]; then
        ASAN_LOG=${LOGS_DIR}/${TEST_NAME}.asan.log
        export ASAN_OPTIONS="detect_odr_violation=0:alloc_dealloc_mismatch=0:halt_on_error=0:detect_leaks=1:log_path=${ASAN_LOG}:verbosity=1:log_thread=1"
        export LSAN_OPTIONS="suppressions=$ROOT_DIR/tests/memcheck/asan.supp:verbosity=1:log_thread=1"
    fi
}

#------------------------------------------------------------------------------
# Detect system architecture and OS
#------------------------------------------------------------------------------
detect_platform() {
    # Detect architecture
    if [[ $(uname -m) == "arm64" || $(uname -m) == "aarch64" ]]; then
        ARCH="aarch64"
    else
        ARCH=$(uname -m)
    fi

    # Detect OS
    OS=$(uname -s | tr '[:upper:]' '[:lower:]')

    # Detect OS nickname (simplified version)
    if [[ $OS == "linux" ]]; then
        if [[ -f /etc/os-release ]]; then
            source /etc/os-release
            OSNICK=$ID
        else
            OSNICK="linux"
        fi
    elif [[ $OS == "darwin" ]]; then
        OSNICK="macos"
    else
        OSNICK=$OS
    fi

    if [[ $VERBOSE == 1 ]]; then
        echo "Platform: $OS ($OSNICK) on $ARCH"
    fi
}

#------------------------------------------------------------------------------
# Run all unit tests
#------------------------------------------------------------------------------
run_all_tests() {
    # Run C tests
    print_separator
    echo "# Running C unit tests"
    C_TESTS_DIR="$(cd $BINROOT/search-community/tests/ctests; pwd)"
    cd $ROOT_DIR/tests/ctests

    if [[ -z $TEST ]]; then
        # Run all C tests
        for test in $(find $C_TESTS_DIR -maxdepth 1 -name "test_*" -type f -print); do
            test_name="$(basename $test)"
            if [[ $TEST_LEAK == 1 || $test_name != test_leak ]]; then
                TEST_NAME="$test_name" setup_sanitizer
                LOG_FILE="${LOGS_DIR}/${test_name}.log"
                echo -n "Running test: $test_name (log: $LOG_FILE) ... "
                { $test > "$LOG_FILE" 2>&1; test_result=$?; (( EXIT_CODE |= $test_result )); } || true

                # Print pass/fail status
                if [[ $test_result -eq 0 ]]; then
                    echo "PASS"
                else
                    echo "FAIL"
                    echo "Test failed! Log output:"
                    cat "$LOG_FILE"
                fi
            fi
        done
    else
        # Run single C test if it exists
        if [[ -f $C_TESTS_DIR/$TEST ]]; then
            LOG_FILE="${LOGS_DIR}/${TEST}.log"
            echo -n "Running test: $TEST (log: $LOG_FILE) ... "
            { $C_TESTS_DIR/$TEST > "$LOG_FILE" 2>&1; test_result=$?; (( EXIT_CODE |= $test_result )); } || true

            # Print pass/fail status
            if [[ $test_result -eq 0 ]]; then
                echo "PASS"
            else
                echo "FAIL"
                echo "Test failed! Log output:"
                cat "$LOG_FILE"
            fi
        else
            echo "Test not found: $TEST in $C_TESTS_DIR"
        fi
    fi

    # Run C++ tests
    print_separator
    echo "# Running C++ unit tests"
    CPP_TESTS_DIR="$(cd $BINROOT/search-community/tests/cpptests; pwd)"
    cd $ROOT_DIR/tests/cpptests
    TEST_NAME=rstest setup_sanitizer

    if [[ -z $TEST ]]; then
        # Run all C++ tests but capture the output to parse individual test results
        LOG_FILE="${LOGS_DIR}/rstest.log"
        echo "Running all C++ tests (log: $LOG_FILE)"
        { $CPP_TESTS_DIR/rstest > "$LOG_FILE" 2>&1; test_result=$?; (( EXIT_CODE |= $test_result )); } || true

        # Parse the output to show individual test results
        echo "Individual test results:"

        # Extract all test results (both passed and failed)
        # The pattern matches lines like: [       OK ] TestCase.TestName (5 ms)
        # or [  FAILED  ] TestCase.TestName
        grep -E "\[ *OK *\]|\[ *FAILED *\]" "$LOG_FILE" | while read -r line; do
            if [[ $line == *"[       OK ]"* ]]; then
                # Extract test name from passed test
                test_name=$(echo "$line" | sed -e 's/\[ *OK *\] \(.*\) (.* ms)/\1/')
                echo "$test_name ... PASS"
            elif [[ $line == *"[  FAILED  ]"* ]]; then
                # Extract test name from failed test
                test_name=$(echo "$line" | sed -e 's/\[ *FAILED *\] \(.*\)/\1/')
                echo "$test_name ... FAIL"
            fi
        done

        # Show the full output for failed tests if any
        if grep -q "\[ *FAILED *\]" "$LOG_FILE"; then
            printf "\nFailed tests output:\n"
            # Extract sections for failed tests
            awk '/\[ *RUN *\]/{test=$0} /\[ *FAILED *\]/{print test; print $0; print "----- Error details -----"; flag=1; next} flag{print} /\[ *RUN *\]/{flag=0}' "$LOG_FILE"
        fi

        # Show summary
        printf "\nTest summary:\n"
        grep "\[==========\]" "$LOG_FILE" | tail -n 2
    else
        # Run single C++ test if requested
        if [[ -f $CPP_TESTS_DIR/rstest ]]; then
            LOG_FILE="${LOGS_DIR}/rstest_${TEST}.log"
            echo "Running C++ test: $TEST (log: $LOG_FILE)"
            { $CPP_TESTS_DIR/rstest --gtest_filter=$TEST > "$LOG_FILE" 2>&1; test_result=$?; (( EXIT_CODE |= $test_result )); } || true

            # Always print output for single test mode
            if [[ $test_result -eq 0 ]]; then
                echo "Test result: PASS"
            else
                echo "Test result: FAIL"
                cat "$LOG_FILE"
            fi
        else
            echo "C++ test binary not found: $CPP_TESTS_DIR/rstest"
        fi
    fi

    # Run coordinator tests
    print_separator
    echo "# Running coordinator unit tests"

    for TESTS_DIR in "$(cd $BINROOT/search-community/tests/ctests/coord_tests; pwd)" "$(cd $BINROOT/search-community/tests/cpptests; pwd)"; do
        if [[ -z $TEST ]]; then
            # Run all coordinator tests
            for test in $(find $TESTS_DIR -maxdepth 1 -name "test_*" -type f -print); do
                test_name="$(basename $test)"
                TEST_NAME="$test_name" setup_sanitizer
                LOG_FILE="${LOGS_DIR}/coord_${test_name}.log"
                echo -n "Running coordinator test: $test_name (log: $LOG_FILE) ... "
                { $test > "$LOG_FILE" 2>&1; test_result=$?; (( EXIT_CODE |= $test_result )); } || true

                # Print pass/fail status
                if [[ $test_result -eq 0 ]]; then
                    echo "PASS"
                else
                    echo "FAIL"
                    echo "Test failed! Log output:"
                    cat "$LOG_FILE"
                fi
            done
        else
            # Run single coordinator test if it exists
            if [[ -f $TESTS_DIR/$TEST ]]; then
                LOG_FILE="${LOGS_DIR}/coord_${TEST}.log"
                echo -n "Running coordinator test: $TEST (log: $LOG_FILE) ... "
                { $TESTS_DIR/$TEST > "$LOG_FILE" 2>&1; test_result=$?; (( EXIT_CODE |= $test_result )); } || true

                # Print pass/fail status
                if [[ $test_result -eq 0 ]]; then
                    echo "PASS"
                else
                    echo "FAIL"
                    echo "Test failed! Log output:"
                    cat "$LOG_FILE"
                fi
            fi
        fi
    done
}

#------------------------------------------------------------------------------
# Generate test summary and collect logs if needed
#------------------------------------------------------------------------------
generate_summary() {
    # Run memory check summary if needed
    if [[ -n $SAN || $VG == 1 ]]; then
        { UNIT=1 $ROOT_DIR/sbin/memcheck-summary; (( EXIT_CODE |= $? )); } || true
    fi

    # Collect logs if requested
    if [[ $COLLECT_LOGS == 1 ]]; then
        cd $ROOT_DIR
        mkdir -p bin/artifacts/tests
        test_tar="bin/artifacts/tests/unit-tests-logs-${ARCH}-${OSNICK}.tgz"
        rm -f "$test_tar"
        find tests/logs -name "*.log*" | tar -czf "$test_tar" -T -
        echo "Tests logs:"
        du -ah --apparent-size bin/artifacts/tests
    fi
}

#------------------------------------------------------------------------------
# Main execution starts here
#------------------------------------------------------------------------------

# Check for help request
[[ $1 == --help || $1 == help || $HELP == 1 ]] && { show_help; exit 0; }

# Detect platform information
detect_platform

# Setup paths and variables
export EXT_TEST_PATH=${BINROOT}/search-community/example_extension/libexample_extension.so

# Configure test scope
TEST_LEAK=${TEST_LEAK:-0}

# Set up logs directory
LOGS_DIR=$ROOT_DIR/tests/logs
if [[ $CLEAR_LOGS != 0 ]]; then
    rm -rf $LOGS_DIR
fi
mkdir -p $LOGS_DIR

# Initialize exit code
EXIT_CODE=0

# Run all tests
run_all_tests

# Generate summary and handle logs
generate_summary

# Exit with the accumulated status code
exit $EXIT_CODE
