#!/bin/bash

PROGNAME="${BASH_SOURCE[0]}"
HERE="$(cd "$(dirname "$PROGNAME")" &>/dev/null && pwd)"
ROOT=$(cd $HERE/.. && pwd)
READIES=$ROOT/deps/readies
. $READIES/shibumi/defs

cd $HERE

#----------------------------------------------------------------------------------------------

help() {
	cat <<-'END'
		Run unit tests

		[ARGVARS...] unit-tests [--help|help]

		Argument variables:
		BINROOT=path   Path to repo binary root dir
		TEST=name      Operate in single-test mode

		C_TESTS=1      Run C tests
		CPP_TESTS=1    Run C++ tests (gtest)
		BENCH=1        Run micro-benchmark
		COORD=1|oss    Test Coordinator
		TEST_LEAK=1    Run test that leaks (for sanitizer diagnostics)

		NOFAIL=1       Do not fail on errors (always exit with 0)
		STATFILE=file  Write test status (0|1) into `file`

		GDB=1          Enable interactive gdb debugging (in single-test mode)
		CLANG=1        Implies use of lldb debugger

		VERBOSE=1      Print commands and Redis output
		NOP=1          Dry run
		HELP=1         Show help


	END
}

#----------------------------------------------------------------------------------------------

sanitizer_defs() {
	if [[ -n $SAN ]]; then
		ASAN_LOG=${LOGS_DIR}/${TEST_NAME}.asan.log
		export ASAN_OPTIONS="detect_odr_violation=0:halt_on_error=0:detect_leaks=1:log_path=${ASAN_LOG}"
		export LSAN_OPTIONS="suppressions=$ROOT/tests/memcheck/asan.supp"
		# :use_tls=0

	fi
}

#------------------------------------------------------------------------------------ Arguments

[[ $1 == --help || $1 == help || $HELP == 1 ]] && { help; exit 0; }

OP=
[[ $NOP == 1 ]] && OP=echo

#--------------------------------------------------------------------------------- Environments

ARCH=$($READIES/bin/platform --arch)
OS=$($READIES/bin/platform --os)
OSNICK=$($READIES/bin/platform --osnick)

#---------------------------------------------------------------------------------------- Setup

export EXT_TEST_PATH=${BINROOT}/search/example_extension/libexample_extension.so

SKIP_CPP_TESTS=""
#---------------------------------------------------------------------------------- Tests scope

[[ $COORD == 1 ]] && COORD=oss

TEST_LEAK=${TEST_LEAK:-0}

[[ $C_TESTS == 1 ]] && CPP_TESTS=${CPP_TESTS:-0}
[[ $CPP_TESTS == 1 ]] && C_TESTS=${C_TESTS:-0}
C_TESTS=${C_TESTS:-1}
CPP_TESTS=${CPP_TESTS:-1}

#------------------------------------------------------------------------------------ Debugging

if [[ $GDB == 1 ]]; then
	if [[ $CLANG == 1 ]]; then
		GDB_CMD="lldb -o run --"
	else
		GDB_CMD="gdb -ex r --args"
	fi
else
	GDB_CMD=""
fi

#-------------------------------------------------------------------------------- Platform Mode

if [[ $PLATFORM_MODE == 1 ]]; then
	CLEAR_LOGS=0
	COLLECT_LOGS=1
	NOFAIL=1
fi
STATFILE=${STATFILE:-$ROOT/bin/artifacts/tests/status}

#----------------------------------------------------------------------------------------- Logs

LOGS_DIR=$ROOT/tests/logs

if [[ $CLEAR_LOGS != 0 ]]; then
	rm -rf $LOGS_DIR
fi

mkdir -p $LOGS_DIR

#-------------------------------------------------------------------------------- Running tests

E=0

if [[ -z $COORD ]]; then
	if [[ $C_TESTS == 1 ]]; then
		$READIES/bin/sep1
		echo "# Running C unit tests"
		TESTS_DIR="$(cd $BINROOT/search/tests/ctests; pwd)"
		cd $ROOT/tests/ctests
		if [[ -z $TEST ]]; then
			if [[ $NOP != 1 ]]; then
				for test in $(find $TESTS_DIR -name "test_*" -type f -executable -print); do
					test_name="$(basename $test)"
					if [[ $TEST_LEAK == 1 || $test_name != test_leak ]]; then
						TEST_NAME="$test_name" sanitizer_defs
						{ $test; (( E |= $? )); } || true
					fi
				done
			else
				find $TESTS_DIR -name "test_*" -type f -executable -print
			fi
		else
			$OP $GDB_CMD $TESTS_DIR/$TEST
		fi
	fi

	if [[ $CPP_TESTS == 1 ]]; then
		$READIES/bin/sep1
		echo "# Running C++ unit tests"
		TESTS_DIR="$(cd $BINROOT/search/tests/cpptests; pwd)"
		cd $ROOT/tests/cpptests
		TEST_NAME=rstest sanitizer_defs
		if [[ -z $TEST ]]; then
			{ $OP $GDB_CMD $TESTS_DIR/rstest --gtest_filter="-$SKIP_CPP_TESTS"; (( E |= $? )); } || true
		else
			{ $OP $GDB_CMD $TESTS_DIR/rstest --gtest_filter=$TEST; (( E |= $? )); } || true
		fi
	fi

elif [[ $COORD == oss ]]; then
	$READIES/bin/sep1
	echo "# Running coordinator unit tests"
	TESTS_DIR="$(cd $BINROOT/coord-oss/tests/unit; pwd)"
	cd $ROOT/coord/tests/unit
	if [[ -z $TEST ]]; then
		if [[ $NOP != 1 ]]; then
			for test in $(find $TESTS_DIR -name "test_*" -type f -executable -print); do
				TEST_NAME="$(basename $test)" sanitizer_defs
				{ $test; (( E |= $? )); } || true
			done
		else
			find $TESTS_DIR -name "test_*" -type f -executable -print
		fi
	else
		$OP $GDB_CMD $TESTS_DIR/$TEST
	fi
fi

#-------------------------------------------------------------------------------------- Summary

if [[ $NOP != 1 ]]; then
	if [[ -n $SAN || $VG == 1 ]]; then
		{ UNIT=1 $ROOT/sbin/memcheck-summary; (( E |= $? )); } || true
	fi
fi

if [[ $COLLECT_LOGS == 1 ]]; then
	cd $ROOT
	mkdir -p bin/artifacts/tests
	test_tar="bin/artifacts/tests/unit-tests-logs-${ARCH}-${OSNICK}.tgz"
	rm -f "$test_tar"
	find tests/logs -name "*.log*" | tar -czf "$test_tar" -T -
	echo "Tests logs:"
	du -ah --apparent-size bin/artifacts/tests
fi

if [[ -n $STATFILE ]]; then
	mkdir -p "$(dirname "$STATFILE")"
	if [[ -f $STATFILE ]]; then
		(( E |= $(cat $STATFILE || echo 1) )) || true
	fi
	echo $E > $STATFILE
fi

if [[ $NOFAIL == 1 ]]; then
	exit 0
fi

exit $E
