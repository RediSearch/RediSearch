#!/usr/bin/env bash

#------------------------------------------------------------------------------
# RediSearch Unit Tests Runner
#
# This script runs unit tests for the RediSearch project. It supports running
# all unit tests with options for debugging and sanitizer support.
#
# Author: RediSearch Team
#------------------------------------------------------------------------------

# Get script location and set up paths
PROGNAME="${BASH_SOURCE[0]}"
SCRIPT_DIR="$(cd "$(dirname "$PROGNAME")" &>/dev/null && pwd)"
ROOT_DIR=$(cd $SCRIPT_DIR/.. && pwd)

cd $SCRIPT_DIR

#------------------------------------------------------------------------------
# Print separator line for better readability
#------------------------------------------------------------------------------
print_separator() {
    local cols=80
    # Try to get terminal width
    if command -v tput >/dev/null 2>&1; then
        cols=$(tput cols 2>/dev/null || echo 80)
    fi
    printf "\n%s\n" "$(printf '%0.s-' $(seq 1 $((cols-1))))"
}

#------------------------------------------------------------------------------
# Display help information
#------------------------------------------------------------------------------
show_help() {
    cat <<'END'
        RediSearch Unit Tests Runner

        Usage: [ARGVARS...] unit-tests [--help|help]

        Arguments:
        BINDIR=path   Path to repo binary dir
        TEST=name      Run only the specified test
        VERBOSE=1      Show more detailed output
        GDB=1          Run tests with interactive gdb debugger (stops on crashes)
        HELP=1         Show this help message
END
}

#------------------------------------------------------------------------------
# Configure sanitizer options for memory error detection
#------------------------------------------------------------------------------
setup_sanitizer() {
    if [[ -n $SAN ]]; then
        ASAN_LOG=${LOGS_DIR}/${TEST_NAME}.asan.log
        export ASAN_OPTIONS="detect_odr_violation=0:alloc_dealloc_mismatch=0:halt_on_error=0:detect_leaks=1:log_path=${ASAN_LOG}:verbosity=1:log_thread=1"
        export LSAN_OPTIONS="suppressions=$ROOT_DIR/tests/memcheck/asan.supp:verbosity=1:log_thread=1"
    fi
}

#------------------------------------------------------------------------------
# Detect system architecture and OS using get-platform script
#------------------------------------------------------------------------------
detect_platform() {
    # Use the get-platform script to detect platform information
    ARCH=$($SCRIPT_DIR/get-platform --arch)
    OS=$($SCRIPT_DIR/get-platform --os)
    OSNICK=$($SCRIPT_DIR/get-platform --osnick)

    if [[ $VERBOSE == 1 ]]; then
        echo "Platform: $OS ($OSNICK) on $ARCH"
    fi
}

#------------------------------------------------------------------------------
# Run a single test and report results
#------------------------------------------------------------------------------
run_single_test() {
    local test_path=$1
    local test_name=$(basename $test_path)
    local log_prefix=$2

    # We always run all tests
    # (TEST_LEAK option has been removed)

    # Setup test environment
    TEST_NAME="$test_name" setup_sanitizer
    LOG_FILE="${LOGS_DIR}/${log_prefix}${test_name}.log"

    # Prepare test command
    local test_cmd="$test_path"
    if [[ $GDB == 1 ]]; then
        # Run with gdb interactively, but with commands that auto-continue on success
        echo "Running test with gdb: $test_name"
        echo "GDB will stop on crashes/signals for debugging. Test will exit automatically on success."
        echo "Starting GDB session for: $test_name"
        echo "----------------------------------------"

        # Create a temporary gdb command file
        local gdb_cmd_file=$(mktemp)
        cat > "$gdb_cmd_file" << 'EOF'
set confirm off
set pagination off
set height 0
set width 0
set startup-quietly on
set verbose off
handle SIGSEGV stop print nopass
handle SIGABRT stop print nopass
define hook-stop
  if $_exitcode != -1
    quit
  end
  echo \n=== Program stopped due to signal ===\n
  bt
  echo \n=== Use 'continue' to proceed, 'quit' to exit ===\n
end
run
EOF

        # Use environment variables to disable paging completely and reduce startup text
        LINES=50000 COLUMNS=200 PAGER= GDB_COLORS= gdb --quiet -iex "set pagination off" -iex "set height 0" -iex "set width 0" -iex "set startup-quietly on" -iex "set verbose off" -x "$gdb_cmd_file" --args $test_path 2>/dev/null || true
        test_result=$?
        rm -f "$gdb_cmd_file"
        (( EXIT_CODE |= $test_result ))
        echo "----------------------------------------"
        echo "GDB session ended for: $test_name"
        return
    else
        echo -n "Running test: $test_name (log: $LOG_FILE) ... "
    fi

    # Run the test (non-GDB path)
    { $test_cmd > "$LOG_FILE" 2>&1; test_result=$?; (( EXIT_CODE |= $test_result )); } || true

    # Report results
    if [[ $test_result -eq 0 ]]; then
        echo "PASS"
    else
        echo "FAIL"
        echo "Test failed! Log output:"
        cat "$LOG_FILE"
    fi
}

#------------------------------------------------------------------------------
# Run C unit tests
#------------------------------------------------------------------------------
run_c_tests() {
    print_separator
    echo "# Running C unit tests"
    C_TESTS_DIR="$(cd $BINDIR/tests/ctests; pwd)"
    cd $ROOT_DIR/tests/ctests

    if [[ -z $TEST ]]; then
        # Run all C tests
        for test in $(find $C_TESTS_DIR -maxdepth 1 -name "test_*" -type f -print); do
            run_single_test "$test" ""
        done
    elif [[ -f $C_TESTS_DIR/$TEST ]]; then
        # Run single C test
        run_single_test "$C_TESTS_DIR/$TEST" ""
    else
        echo "Test not found: $TEST in $C_TESTS_DIR"
    fi
}

#------------------------------------------------------------------------------
# Run C++ unit tests
#------------------------------------------------------------------------------
run_cpp_tests() {
    print_separator
    echo "# Running C++ unit tests"
    CPP_TESTS_DIR="$(cd $BINDIR/tests/cpptests; pwd)"
    cd $ROOT_DIR/tests/cpptests
    TEST_NAME=rstest setup_sanitizer

    # C++ tests are special because they use Google Test framework
    # which runs multiple tests in a single binary
    if [[ -z $TEST ]]; then
        # Run all C++ tests
        LOG_FILE="${LOGS_DIR}/rstest.log"
        if [[ $GDB == 1 ]]; then
            echo "Running all C++ tests with gdb"
            echo "GDB will stop on crashes/signals for debugging. Test will exit automatically on success."
            echo "Starting GDB session for: rstest (all C++ tests)"
            echo "----------------------------------------"

            # Create a temporary gdb command file
            local gdb_cmd_file=$(mktemp)
            cat > "$gdb_cmd_file" << 'EOF'
set confirm off
set pagination off
set height 0
set width 0
set startup-quietly on
set verbose off
handle SIGSEGV stop print nopass
handle SIGABRT stop print nopass
define hook-stop
  if $_exitcode != -1
    quit
  end
  echo \n=== Program stopped due to signal ===\n
  bt
  echo \n=== Use 'continue' to proceed, 'quit' to exit ===\n
end
run
EOF

            LINES=50000 COLUMNS=200 PAGER= GDB_COLORS= gdb --quiet -iex "set pagination off" -iex "set height 0" -iex "set width 0" -iex "set startup-quietly on" -iex "set verbose off" -x "$gdb_cmd_file" --args $CPP_TESTS_DIR/rstest 2>/dev/null || true
            test_result=$?
            rm -f "$gdb_cmd_file"
            (( EXIT_CODE |= $test_result ))
            echo "----------------------------------------"
            echo "GDB session ended for: rstest (all C++ tests)"
        else
            echo "Running all C++ tests (log: $LOG_FILE)"
            { $CPP_TESTS_DIR/rstest > "$LOG_FILE" 2>&1; test_result=$?; (( EXIT_CODE |= $test_result )); } || true
            # Parse and display individual test results
            parse_cpp_test_results "$LOG_FILE"
        fi
    else
        # Run single C++ test if requested
        if [[ -f $CPP_TESTS_DIR/rstest ]]; then
            LOG_FILE="${LOGS_DIR}/rstest_${TEST}.log"
            if [[ $GDB == 1 ]]; then
                echo "Running C++ test with gdb: $TEST"
                echo "GDB will stop on crashes/signals for debugging. Test will exit automatically on success."
                echo "Starting GDB session for: rstest --gtest_filter=$TEST"
                echo "----------------------------------------"

                # Create a temporary gdb command file
                local gdb_cmd_file=$(mktemp)
                cat > "$gdb_cmd_file" << 'EOF'
set confirm off
set pagination off
set height 0
set width 0
set startup-quietly on
set verbose off
handle SIGSEGV stop print nopass
handle SIGABRT stop print nopass
define hook-stop
  if $_exitcode != -1
    quit
  end
  echo \n=== Program stopped due to signal ===\n
  bt
  echo \n=== Use 'continue' to proceed, 'quit' to exit ===\n
end
run
EOF

                LINES=50000 COLUMNS=200 PAGER= GDB_COLORS= gdb --quiet -iex "set pagination off" -iex "set height 0" -iex "set width 0" -iex "set startup-quietly on" -iex "set verbose off" -x "$gdb_cmd_file" --args $CPP_TESTS_DIR/rstest --gtest_filter=$TEST 2>/dev/null || true
                test_result=$?
                rm -f "$gdb_cmd_file"
                (( EXIT_CODE |= $test_result ))
                echo "----------------------------------------"
                echo "GDB session ended for: rstest --gtest_filter=$TEST"
            else
                echo "Running C++ test: $TEST (log: $LOG_FILE)"
                { $CPP_TESTS_DIR/rstest --gtest_filter=$TEST > "$LOG_FILE" 2>&1; test_result=$?; (( EXIT_CODE |= $test_result )); } || true
                # Parse and display results
                parse_cpp_test_results "$LOG_FILE"
            fi
        else
            echo "C++ test binary not found: $CPP_TESTS_DIR/rstest"
        fi
    fi
}

#------------------------------------------------------------------------------
# Parse and display C++ test results
#------------------------------------------------------------------------------
parse_cpp_test_results() {
    local log_file=$1

    echo "Individual test results:"

    # Extract all test results (both passed and failed)
    grep -E "\[ *OK *\]|\[ *FAILED *\]" "$log_file" | while read -r line; do
        if [[ $line == *"[       OK ]"* ]]; then
            # Extract test name from passed test
            test_name=$(echo "$line" | sed -e 's/\[ *OK *\] \(.*\) (.* ms)/\1/')
            echo "$test_name ... PASS"
        elif [[ $line == *"[  FAILED  ]"* ]]; then
            # Extract test name from failed test
            test_name=$(echo "$line" | sed -e 's/\[ *FAILED *\] \(.*\)/\1/')
            echo "$test_name ... FAIL"
        fi
    done

    # Show the full output for failed tests if any
    if grep -q "\[ *FAILED *\]" "$log_file"; then
        printf "\nFailed tests output:\n"
        # Extract sections for failed tests
        awk '/\[ *RUN *\]/{test=$0} /\[ *FAILED *\]/{print test; print $0; print "----- Error details -----"; flag=1; next} flag{print} /\[ *RUN *\]/{flag=0}' "$log_file"
    fi

    # Show summary
    printf "\nTest summary:\n"
    grep "\[==========\]" "$log_file" | tail -n 2
}

#------------------------------------------------------------------------------
# Run coordinator unit tests
#------------------------------------------------------------------------------
run_coordinator_tests() {
    print_separator
    echo "# Running coordinator unit tests"

    # Only look in coord_tests directory - C++ tests are handled by run_cpp_tests()
    COORD_TESTS_DIR="$BINDIR/tests/ctests/coord_tests"

    # Check if the directory exists
    if [[ ! -d "$COORD_TESTS_DIR" ]]; then
        echo "Coordinator tests directory not found: $COORD_TESTS_DIR"
        return 0
    fi

    if [[ -z $TEST ]]; then
        # Run all coordinator tests
        for test in $(find "$COORD_TESTS_DIR" -maxdepth 1 -name "test_*" -type f -print); do
            run_single_test "$test" "coord_"
        done
    elif [[ -f "$COORD_TESTS_DIR/$TEST" ]]; then
        # Run single coordinator test
        run_single_test "$COORD_TESTS_DIR/$TEST" "coord_"
    else
        echo "Coordinator test not found: $TEST in $COORD_TESTS_DIR"
    fi
}

#------------------------------------------------------------------------------
# Run all unit tests
#------------------------------------------------------------------------------
run_all_tests() {
    # Run C tests
    run_c_tests

    # Run C++ tests
    run_cpp_tests

    # Run coordinator tests
    run_coordinator_tests
}

#------------------------------------------------------------------------------
# Generate test summary and collect logs if needed
#------------------------------------------------------------------------------
generate_summary() {
    # Run memory check summary if needed
    if [[ -n $SAN || $VG == 1 ]]; then
        { UNIT=1 $ROOT_DIR/sbin/memcheck-summary; (( EXIT_CODE |= $? )); } || true
    fi

    # Collect logs if requested
    if [[ $COLLECT_LOGS == 1 ]]; then
        cd $ROOT_DIR
        mkdir -p bin/artifacts/tests
        test_tar="bin/artifacts/tests/unit-tests-logs-${ARCH}-${OSNICK}.tgz"
        rm -f "$test_tar"
        find tests/logs -name "*.log*" | tar -czf "$test_tar" -T -
        echo "Tests logs:"
        du -ah --apparent-size bin/artifacts/tests
    fi
}

#------------------------------------------------------------------------------
# Main execution starts here
#------------------------------------------------------------------------------

# Check for help request
[[ $1 == --help || $1 == help || $HELP == 1 ]] && { show_help; exit 0; }

# Detect platform information
detect_platform

# Setup paths and variables
# Calculate BINDIR from BINROOT if not already set
if [[ -z $BINDIR ]]; then
    if [[ -n $BINROOT ]]; then
        # Default to OSS build path - make it absolute
        if [[ "$BINROOT" = /* ]]; then
            # BINROOT is already absolute
            BINDIR="$BINROOT/search-community"
        else
            # BINROOT is relative to ROOT_DIR
            BINDIR="$ROOT_DIR/$BINROOT/search-community"
        fi
    else
        echo "Error: Neither BINDIR nor BINROOT is set"
        exit 1
    fi
fi

export EXT_TEST_PATH=${BINDIR}/example_extension/libexample_extension.so

# No test scope configuration needed

# Set up logs directory
LOGS_DIR=$ROOT_DIR/tests/logs
if [[ $CLEAR_LOGS != 0 ]]; then
    rm -rf $LOGS_DIR
fi
mkdir -p $LOGS_DIR

# Initialize exit code
EXIT_CODE=0

# Run all tests
run_all_tests

# Generate summary and handle logs
generate_summary

# Exit with the accumulated status code
exit $EXIT_CODE
