#!/bin/bash

PROGNAME="${BASH_SOURCE[0]}"
HERE="$(cd "$(dirname "$PROGNAME")" &>/dev/null && pwd)"
ROOT=$(cd $HERE/.. && pwd)
READIES=$ROOT/deps/readies
. $READIES/shibumi/defs

if [[ $1 == --help || $1 == help || $HELP == 1 ]]; then
	cat <<-END
		Build RedisJSON module (for Sanitizer)

		build-redisjson [--help|help]

		Argument variables:
		BINROOT=dir        Build into dir
		BRANCH=name        Use given branch (default: master)
		SAN=mode           Clang Sanitizer mode (address|memory)
		MODULE_FILE=file   Write module path into `file`
		FORCE=1            Force rebuild
		NOP=1              No operation
		HELP=1             Show help

	END
	exit 0
fi

OP=
[[ $NOP == 1 ]] && OP=echo

if [[ -n $SAN && $SAN != address && $SAN != memory ]]; then
	echo "Invalid SAN setting: '$SAN'"
	exit 1
fi

if [[ -z $BINROOT ]]; then
	export BINROOT=$ROOT/bin/$($READIES/bin/platform -t)
fi
TARGET_DIR=$BINROOT/RedisJSON
echo Building into $TARGET_DIR ...

if [[ $FORCE == 1 ]]; then
	runn rm -rf $TARGET_DIR
fi

BRANCH=${BRANCH:-master}

$OP cd $ROOT/deps
if [[ ! -d RedisJSON ]]; then
	runn git clone --quiet --recursive https://github.com/RedisJSON/RedisJSON.git
fi

$OP cd RedisJSON
runn git checkout $BRANCH
runn git pull --quiet --recurse-submodules

# Patch RedisJSON to build in Alpine - disable static linking
# This is to fix RedisJSON build in Alpine, which is used only for testing
# See https://github.com/rust-lang/rust/pull/58575#issuecomment-496026747
OS_NAME=$(grep '^NAME=' /etc/os-release | sed 's/"//g')
OS_NAME=${OS_NAME#"NAME="}
if [[ $OS_NAME == "Alpine Linux" ]]; then
	$OP sed -i "s/^RUST_FLAGS=$/RUST_FLAGS=-C target-feature=-crt-static/g" Makefile
fi

# Install only rust, because the rest of the dependencies are already installed
if [[ $NOP != 1 ]]; then
	curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
	source $HOME/.cargo/env
	rustup update 
	rustup update nightly
	rustup show

	# for RedisJSON build with addess santizer if required
	if [[ -n $SAN ]]; then
		rustup component add rust-src --toolchain nightly
	fi
	BINROOT=$TARGET_DIR make SAN=$SAN
	echo "Created ${TARGET_DIR}/rejson.so"
fi

if [[ -n $MODULE_FILE ]]; then
	echo "${TARGET_DIR}/rejson.so" > $MODULE_FILE
fi
