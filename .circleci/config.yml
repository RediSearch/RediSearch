version: 2.1

parameters:
  run_default_flow:
    default: true
    type: boolean
  run_benchmark_flow_label:
    default: false
    type: boolean

commands:
  early-returns:
    steps:
      - run:
          name: Early return if this is a docs build
          command: |
            if [[ $CIRCLE_BRANCH == *docs ]]; then
              echo "Identifies as documents PR, no testing required."
              circleci step halt
            fi
      - run:
          name: Early return if this branch should ignore CI
          command: |
            if [[ $CIRCLE_BRANCH == *noci ]]; then
              echo "Identifies as actively ignoring CI, no testing required."
              circleci step halt
            fi

  early-return-for-forked-pull-requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [[ -n "$CIRCLE_PR_NUMBER" ]]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi

  setup-executor:
    steps:
      - run:
          name: Setup executor
          command: |
            apt-get -qq update
            apt-get -q install -y git openssh-client curl ca-certificates make tar gzip
            bash <(curl -fsSL https://raw.githubusercontent.com/docker/docker-install/master/install.sh)
      - setup_remote_docker:
          version: 20.10.14
          docker_layer_caching: true

  checkout-all:
    steps:
      - checkout
      - run:
          name: Checkout submodules
          command: git submodule update --init --recursive

  setup-automation:
    steps:
      - run:
          name: Setup automation
          command: |
            git submodule update --init deps/readies
            if [[ $(uname -s) == Darwin ]]; then rm -f /usr/local/bin/python3; fi
            ./deps/readies/bin/getpy3
      - run:
          name: Setup automation (part 2)
          shell: /bin/bash -l -eo pipefail
          no_output_timeout: 30m
          command: |
            export HOMEBREW_NO_AUTO_UPDATE=1
            ./deps/readies/bin/getaws
            ls -l /usr/local/bin/python* || true
            echo "python3: $(command -v python3)"
            python3 --version
            python3 -m pip list

  install-prerequisites:
    parameters:
      redis_version:
        type: string
        default: "7"
      getredis_params:
        type: string
        default: ""
    steps:
      - setup-automation
      - run:
          name: System setup
          shell: /bin/bash -l -eo pipefail
          command: |
            ./sbin/system-setup.py
            python3 -m pip list
      - run:
          name: Install Redis
          shell: /bin/bash -l -eo pipefail
          command: |
            python3 ./deps/readies/bin/getredis -v '<<parameters.redis_version>>' --force <<parameters.getredis_params>>
            redis-server --version

  save-tests-logs:
    steps:
      - run:
          name: Pack logs
          shell: /bin/bash -l -eo pipefail
          command: ./sbin/circleci-pack-logs
          when: always
      - store_artifacts:
          path: logs/

  persist-artifacts:
    steps:
      - early-return-for-forked-pull-requests
      - run:
          name: List artifacts
          command: |
            cd bin/artifacts
            du -ah --apparent-size *
      - persist_to_workspace:
          root: bin/
          paths:
            - artifacts/*.zip
            - artifacts/*.tgz
            - artifacts/*.tar

  build-steps:
    parameters:
      redis_version:
        type: string
        default: "7"
      getredis_params:
        type: string
        default: ""
      build_params:
        type: string
        default: ""
      run_pack:
        type: boolean
        default: true
      no_power:
        type: string
        default: "no"
    steps:
      - early-returns
      - checkout-all
      - install-prerequisites:
          redis_version: <<parameters.redis_version>>
          getredis_params: <<parameters.getredis_params>>
      - run:
          name: Prepare Conan dependencies
          shell: /bin/bash -l -eo pipefail
          command: |
            make conan <<parameters.build_params>> SHOW=1 NPROC=16
      - run:
          name: Build (Search)
          shell: /bin/bash -l -eo pipefail
          command: |
            if [[ "<<parameters.no_power>>" == "yes" ]]; then
                export REDISEARCH_POWER_TO_THE_WORKERS=0
            fi
            make build <<parameters.build_params>> SHOW=1 NPROC=16
      - run:
          name: Build (Search Lite)
          shell: /bin/bash -l -eo pipefail
          command: |
            make build LITE=1 <<parameters.build_params>> SHOW=1 NPROC=16
      - run:
          name: Build (OSS Coordinator)
          shell: /bin/bash -l -eo pipefail
          command: make build COORD=oss <<parameters.build_params>> SHOW=1 NPROC=16
      - run:
          name: Build (RLEC Coordinator)
          shell: /bin/bash -l -eo pipefail
          command: make build COORD=rlec <<parameters.build_params>> SHOW=1 NPROC=16
      - when:
          condition: << parameters.run_pack >>
          steps:
            - run:
                name: Pack
                shell: /bin/bash -l -eo pipefail
                command: |
                  make pack SHOW=1
                  make pack COORD=rlec SHOW=1
                  make pack LITE=1 SHOW=1

  test-steps:
    parameters:
      test_params:
        type: string
        default: ""
      no_power:
        type: string
        default: "no"
    steps:
      - run:
          name: Test (Search)
          shell: /bin/bash -l -eo pipefail
          no_output_timeout: 30m
          command: |
            if [[ "<<parameters.no_power>>" == "yes" ]]; then
                export REDISEARCH_POWER_TO_THE_WORKERS=0
            fi
            make test TEST_PARALLEL=16 CLEAR_LOGS=0 SHOW=1 <<parameters.test_params>>
      - run:
          name: Test (OSS Coordinator)
          shell: /bin/bash -l -eo pipefail
          no_output_timeout: 30m
          command: make test COORD=oss TEST_PARALLEL=16 CLEAR_LOGS=0 SHOW=1 <<parameters.test_params>>
      - save-tests-logs

  build-platforms-steps:
    parameters:
      platform:
        type: string
    steps:
      - early-returns
      - setup-executor
      - checkout-all
      - setup-automation
      - run:
          name: Install Redis
          shell: /bin/bash -l -eo pipefail
          command: ./deps/readies/bin/getredis
      - run:
          name: Build for platform
          shell: /bin/bash -l -eo pipefail
          command: |
            ROOT="$PWD"
            cd build/docker
            export REDISEARCH_POWER_TO_THE_WORKERS=0
            make build verify OSNICK=<<parameters.platform>> VERSION=$CIRCLE_TAG BRANCH=$CIRCLE_BRANCH TEST=1 OFFICIAL=1 SHOW=1 VERBOSE=1
            cd $ROOT
            if [[ -e bin/artifacts/tests/tests-pytests-logs*.tgz ]]; then
                mkdir -p tests/pytests/logs
                tar -xzf bin/artifacts/tests/tests-pytests-logs*.tgz
            fi
          no_output_timeout: 60m
      - save-tests-logs
      - early-return-for-forked-pull-requests
      - run:
          name: Upload artifacts to S3
          shell: /bin/bash -l -eo pipefail
          command: |
            if [[ -n $CIRCLE_BRANCH ]]; then
                make upload-artifacts OSNICK=<<parameters.platform>> SHOW=1
            fi
      - run:
          name: Publish container
          shell: /bin/bash -l -eo pipefail
          command: |
            docker login -u redisfab -p $DOCKER_REDISFAB_PWD
            cd build/docker
            make publish OSNICK=<<parameters.platform>> VERSION=$CIRCLE_TAG BRANCH=$CIRCLE_BRANCH OFFICIAL=1 SHOW=1 VERBOSE=1
      - persist-artifacts

  vm-build-platforms-steps:
    parameters:
      platform:
        type: string
    steps:
      - early-returns
      - checkout-all
      - setup-automation
      - run:
          name: Install Docker
          shell: /bin/bash -l -eo pipefail
          command: ./deps/readies/bin/getdocker
      - run:
          name: Install Redis
          shell: /bin/bash -l -eo pipefail
          command: ./deps/readies/bin/getredis
      - run:
          name: Build for platform
          command: |
            ROOT="$PWD"
            cd build/docker
            export REDISEARCH_POWER_TO_THE_WORKERS=0
            make build verify OSNICK=<<parameters.platform>> VERSION=$CIRCLE_TAG BRANCH=$CIRCLE_BRANCH TEST=1 OFFICIAL=1 SHOW=1 VERBOSE=1
            cd $ROOT
            if [[ -e bin/artifacts/tests/tests-pytests-logs*.tgz ]]; then
                mkdir -p tests/pytests/logs
                tar -xzf bin/artifacts/tests/tests-pytests-logs*.tgz
            fi
          no_output_timeout: 30m
      - save-tests-logs
      - early-return-for-forked-pull-requests
      - run:
          name: Upload artifacts to S3
          command: |
            if [[ -n $CIRCLE_BRANCH ]]; then
                make upload-artifacts OSNICK=<<parameters.platform>> SHOW=1
            fi
      - run:
          name: Publish container
          command: |
            docker login -u redisfab -p $DOCKER_REDISFAB_PWD
            cd build/docker
            make publish OSNICK=<<parameters.platform>> VERSION=$CIRCLE_TAG BRANCH=$CIRCLE_BRANCH OFFICIAL=1 SHOW=1 VERBOSE=1
      - persist-artifacts

  benchmark-steps:
    parameters:
      github_actor:
        type: string
        default: $CIRCLE_USERNAME
      module_path:
        type: string
        default: bin/linux-x64-release/search/redisearch.so
      profile_env:
        type: string
        default: "0"
      benchmark_glob:
        type: string
        default: "*.yml"
      triggering_env:
        type: string
        default: "circleci"
      allowed_envs:
        type: string
        default: "oss-standalone"
      allowed_setups:
        type: string
        default: ""
      benchmark_runner_group_member_id:
        type: string
        default: "1"
      benchmark_runner_group_total:
        type: string
        default: "1"
    steps:
      - run:
          name: Prepare automation
          command: |
            ./deps/readies/bin/getpy3
            python3 -m pip install -r tests/benchmarks/requirements.txt
            VERSION=0.14.8 ./deps/readies/bin/getterraform
      - run:
          name: Prepare ReJSON Module
          command: MODULE_FILE=bin/REJSON_PATH ./sbin/get-redisjson
      - run:
          name: Run CI benchmarks on aws for envs << parameters.allowed_envs >>
          timeout: 60m
          no_output_timeout: 40m
          command: |
            ROOT="$PWD"
            cd tests/benchmarks
            export AWS_ACCESS_KEY_ID=$PERFORMANCE_EC2_ACCESS_KEY
            export AWS_SECRET_ACCESS_KEY=$PERFORMANCE_EC2_SECRET_KEY
            export AWS_DEFAULT_REGION=$PERFORMANCE_EC2_REGION
            export EC2_PRIVATE_PEM=$PERFORMANCE_EC2_PRIVATE_PEM
            export PROFILE=<< parameters.profile_env >>
            export BENCHMARK_GLOB=<< parameters.benchmark_glob >>
            export PERF_CALLGRAPH_MODE="dwarf"
            export BENCHMARK_RUNNER_GROUP_M_ID=<< parameters.benchmark_runner_group_member_id >>
            export BENCHMARK_RUNNER_GROUP_TOTAL=<< parameters.benchmark_runner_group_total >>
            export MAX_PROFILERS=3
            if [[ -n $CIRCLE_BRANCH ]]; then branch="$CIRCLE_BRANCH"; else branch="$CIRCLE_TAG"; fi
            redisbench-admin run-remote \
              --module_path $(cat $ROOT/bin/REJSON_PATH) \
              --module_path $ROOT/<< parameters.module_path >> \
              --github_actor << parameters.github_actor >> \
              --github_repo $CIRCLE_PROJECT_REPONAME \
              --github_org $CIRCLE_PROJECT_USERNAME \
              --required-module search \
              --github_sha $CIRCLE_SHA1 \
              --github_branch $branch \
              --upload_results_s3 \
              --triggering_env << parameters.triggering_env >> \
              --push_results_redistimeseries \
              --allowed-envs << parameters.allowed_envs >> \
              --allowed-setups << parameters.allowed_setups >> || true
      - run:
          name: Generate Pull Request Performance info
          command: |
            if [[ -n ${CIRCLE_PULL_REQUEST##*/} ]]; then
                redisbench-admin compare  \
                  --defaults_filename ./tests/benchmarks/defaults.yml \
                  --comparison-branch $CIRCLE_BRANCH \
                  --auto-approve \
                  --pull-request ${CIRCLE_PULL_REQUEST##*/}
            fi

#----------------------------------------------------------------------------------------------------------------------------------

jobs:
  build-linux-debian:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    resource_class: large
    parameters:
      build_params:
        type: string
        default: ""
      test_params:
        type: string
        default: "QUICK=1"
      redis_version:
        type: string
        default: "7"
      upload:
        type: string
        default: "yes"
    steps:
      - build-steps:
          build_params: <<parameters.build_params>>
          redis_version: <<parameters.redis_version>>
      - test-steps:
          test_params: <<parameters.build_params>> <<parameters.test_params>>
      - run:
          name: Persist artifacts?
          command: |
            if [[ "<<parameters.upload>>" != "yes" ]]; then
              circleci step halt
            fi
      - persist-artifacts

  build-linux-arm-ubuntu:
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
    parameters:
      redis_version:
        type: string
        default: "7"
      persist:
        type: string
        default: "no"
    steps:
      - build-steps:
          redis_version: <<parameters.redis_version>>
      - test-steps:
          test_params: QUICK=1

  build-platforms:
    parameters:
      platform:
        type: string
    # docker:
    #   - image: debian:bullseye
    machine:
      enabled: true
      image: ubuntu-2004:202010-01
      resource_class: large
    steps:
      - vm-build-platforms-steps:
          platform: <<parameters.platform>>

  build-arm-platforms:
    parameters:
      platform:
        type: string
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
    steps:
      - vm-build-platforms-steps:
          platform: <<parameters.platform>>

  build-macos-x64:
    macos:
      xcode: 13.2.1
    resource_class: macos.x86.medium.gen2
    parameters:
      test_params:
        type: string
        default: "QUICK=1"
      upload:
        type: string
        default: "yes"
    steps:
      - early-returns
      - run:
          name: Brew update
          command: brew update
      - run:
          name: Set up workspace
          command: mkdir -p ~/workspace
      - build-steps:
          no_power: <<parameters.upload>>
      - test-steps:
          test_params: <<parameters.test_params>>
          no_power: <<parameters.upload>>
      - run:
          name: Persist artifacts?
          command: |
            if [[ "<<parameters.upload>>" != "yes" ]]; then
              circleci step halt
            fi
      - run:
          name: Upload artifacts to S3
          command: |
            if [[ -n $CIRCLE_BRANCH && "<<parameters.upload>>" == "yes" ]]; then
                make upload-artifacts SHOW=1
            fi
      - persist-artifacts

  build-macos-m1:
    macos:
      xcode: 14.2.0
    resource_class: macos.m1.large.gen1
    parameters:
      test_params:
        type: string
        default: "QUICK=1"
      upload:
        type: string
        default: "yes"
    steps:
      - early-returns
      - run:
          name: Set up workspace
          command: mkdir -p ~/workspace
      - build-steps:
          no_power: <<parameters.upload>>
      - test-steps:
          test_params: <<parameters.test_params>>
          no_power: <<parameters.upload>>
      - run:
          name: Persist artifacts?
          command: |
            if [[ "<<parameters.upload>>" != "yes" ]]; then
              circleci step halt
            fi
      - run:
          name: Upload artifacts to S3
          command: |
            if [[ -n $CIRCLE_BRANCH && "<<parameters.upload>>" == "yes" ]]; then
                make upload-artifacts SHOW=1
            fi
      - persist-artifacts

  benchmark-search-oss-standalone-g1:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - build-steps:
          run_pack: false
      - benchmark-steps:
          benchmark_glob: "search*.yml"
          benchmark_runner_group_member_id: "1"
          benchmark_runner_group_total: "3"
  benchmark-search-oss-standalone-g2:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - build-steps:
          run_pack: false
      - benchmark-steps:
          benchmark_glob: "search*.yml"
          benchmark_runner_group_member_id: "2"
          benchmark_runner_group_total: "3"

  benchmark-search-oss-standalone-g3:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - build-steps:
          run_pack: false
      - benchmark-steps:
          benchmark_glob: "search*.yml"
          benchmark_runner_group_member_id: "3"
          benchmark_runner_group_total: "3"

  benchmark-vecsim-oss-standalone-g1:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - build-steps:
          run_pack: false
      - benchmark-steps:
          benchmark_glob: "vecsim*.yml"
          benchmark_runner_group_member_id: "1"
          benchmark_runner_group_total: "2"

  benchmark-vecsim-oss-standalone-g2:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - build-steps:
          run_pack: false
      - benchmark-steps:
          benchmark_glob: "vecsim*.yml"
          benchmark_runner_group_member_id: "2"
          benchmark_runner_group_total: "2"

  benchmark-search-oss-cluster-g1:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - build-steps:
          run_pack: false
      - benchmark-steps:
          benchmark_glob: "search*.yml"
          module_path: bin/linux-x64-release/coord-oss/module-oss.so
          allowed_envs: oss-cluster
          allowed_setups: oss-cluster-02-primaries,oss-cluster-04-primaries,oss-cluster-08-primaries
          benchmark_runner_group_member_id: "1"
          benchmark_runner_group_total: "2"

  benchmark-search-oss-cluster-g2:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - build-steps:
          run_pack: false
      - benchmark-steps:
          benchmark_glob: "search*.yml"
          module_path: bin/linux-x64-release/coord-oss/module-oss.so
          allowed_envs: oss-cluster
          allowed_setups: oss-cluster-02-primaries,oss-cluster-04-primaries,oss-cluster-08-primaries
          benchmark_runner_group_member_id: "2"
          benchmark_runner_group_total: "2"

  benchmark-search-oss-cluster-g3:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - build-steps:
          run_pack: false
      - benchmark-steps:
          benchmark_glob: "search*.yml"
          module_path: bin/linux-x64-release/coord-oss/module-oss.so
          allowed_envs: oss-cluster
          allowed_setups: oss-cluster-16-primaries,oss-cluster-20-primaries
          benchmark_runner_group_member_id: "1"
          benchmark_runner_group_total: "2"

  benchmark-search-oss-cluster-g4:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - build-steps:
          run_pack: false
      - benchmark-steps:
          benchmark_glob: "search*.yml"
          module_path: bin/linux-x64-release/coord-oss/module-oss.so
          allowed_envs: oss-cluster
          allowed_setups: oss-cluster-16-primaries,oss-cluster-20-primaries
          benchmark_runner_group_member_id: "2"
          benchmark_runner_group_total: "2"

  benchmark-search-oss-cluster-g5:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - build-steps:
          run_pack: false
      - benchmark-steps:
          benchmark_glob: "search*.yml"
          module_path: bin/linux-x64-release/coord-oss/module-oss.so
          allowed_envs: oss-cluster
          allowed_setups: oss-cluster-24-primaries,oss-cluster-32-primaries
          benchmark_runner_group_member_id: "1"
          benchmark_runner_group_total: "2"

  benchmark-search-oss-cluster-g6:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - build-steps:
          run_pack: false
      - benchmark-steps:
          benchmark_glob: "search*.yml"
          module_path: bin/linux-x64-release/coord-oss/module-oss.so
          allowed_envs: oss-cluster
          allowed_setups: oss-cluster-24-primaries,oss-cluster-32-primaries
          benchmark_runner_group_member_id: "2"
          benchmark_runner_group_total: "2"

  benchmark-search-oss-standalone-profiler-g1:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - build-steps:
          build_params: PROFILE=1
          run_pack: false
      - benchmark-steps:
          profile_env: "1"
          triggering_env: "circleci.profilers" # results generated with profilers attached are not mixed with the ones without it
          module_path: bin/linux-x64-release-profile/search/redisearch.so
          benchmark_glob: "search*.yml"
          benchmark_runner_group_member_id: "1"
          benchmark_runner_group_total: "3"

  benchmark-search-oss-standalone-profiler-g2:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - build-steps:
          build_params: PROFILE=1
          run_pack: false
      - benchmark-steps:
          profile_env: "1"
          triggering_env: "circleci.profilers" # results generated with profilers attached are not mixed with the ones without it
          module_path: bin/linux-x64-release-profile/search/redisearch.so
          benchmark_glob: "search*.yml"
          benchmark_runner_group_member_id: "2"
          benchmark_runner_group_total: "3"

  benchmark-search-oss-standalone-profiler-g3:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - build-steps:
          build_params: PROFILE=1
          run_pack: false
      - benchmark-steps:
          profile_env: "1"
          triggering_env: "circleci.profilers" # results generated with profilers attached are not mixed with the ones without it
          module_path: bin/linux-x64-release-profile/search/redisearch.so
          benchmark_glob: "search*.yml"
          benchmark_runner_group_member_id: "3"
          benchmark_runner_group_total: "3"

  benchmark-vecsim-oss-standalone-profiler-g1:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - build-steps:
          build_params: PROFILE=1
          run_pack: false
      - benchmark-steps:
          profile_env: "1"
          triggering_env: "circleci.profilers" # results generated with profilers attached are not mixed with the ones without it
          module_path: bin/linux-x64-release-profile/search/redisearch.so
          benchmark_glob: "vecsim*.yml"
          benchmark_runner_group_member_id: "1"
          benchmark_runner_group_total: "2"

  benchmark-vecsim-oss-standalone-profiler-g2:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - build-steps:
          build_params: PROFILE=1
          run_pack: false
      - benchmark-steps:
          profile_env: "1"
          triggering_env: "circleci.profilers" # results generated with profilers attached are not mixed with the ones without it
          module_path: bin/linux-x64-release-profile/search/redisearch.so
          benchmark_glob: "vecsim*.yml"
          benchmark_runner_group_member_id: "2"
          benchmark_runner_group_total: "2"

  coverage:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - early-returns
      - checkout-all
      - install-prerequisites
      - run:
          name: Prepare Conan dependencies
          shell: /bin/bash -l -eo pipefail
          command: |
            make conan SHOW=1 NPROC=16
      - run:
          name: Build & Test
          shell: /bin/bash -l -eo pipefail
          command: |
            make coverage QUICK=1 TEST_PARALLEL=16 NPROC=16 SHOW=1
            make upload-cov SHOW=1
          no_output_timeout: 30m
      - save-tests-logs

  sanitize:
    docker:
      - image: redisfab/clang:16-x64-bullseye
    resource_class: large
    parameters:
      san-type:
        type: string
      test_params:
        type: string
        default: "QUICK=1"
    steps:
      - early-returns
      - checkout-all
      - install-prerequisites
      - run:
          name: Prepare Conan dependencies
          shell: /bin/bash -l -eo pipefail
          command: |
            make conan SAN=<<parameters.san-type>> SHOW=1
      - run:
          name: Build & test (Search)
          shell: /bin/bash -l -eo pipefail
          command: |
            make SAN=<<parameters.san-type>> build SHOW=1
            make SAN=<<parameters.san-type>> test TEST_PARALLEL=16 SHOW=1 NOFAIL=1 CLEAR_LOGS=0 <<parameters.test_params>>
          no_output_timeout: 30m
      - run:
          name: Build & test (OSS Coordinator)
          shell: /bin/bash -l -eo pipefail
          command: |
            make SAN=<<parameters.san-type>> COORD=oss build SHOW=1
            make SAN=<<parameters.san-type>> COORD=oss test TEST_PARALLEL=16 SHOW=1 NOFAIL=1 CLEAR_LOGS=0 <<parameters.test_params>>
          no_output_timeout: 30m
      - run:
          name: Check tests results
          command: ./sbin/check-tests
      - save-tests-logs

  valgrind-memcheck:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - early-returns
      - checkout-all
      - run:
          name: Prepare Conan dependencies
          shell: /bin/bash -l -eo pipefail
          command: |
            make conan VG=1 SHOW=1 NPROC=16
      - run:
          name: Build & Test
          shell: /bin/bash -l -eo pipefail
          command: |
            make VG=1 build SHOW=1 NPROC=16
            make VG=1 test SHOW=1
          no_output_timeout: 30m
      - save-tests-logs

  test-rlec:
    machine:
      enabled: true
      image: ubuntu-2004:202010-01
      resource_class: large
    working_directory: ~/RediSearch
    steps:
      - early-returns
      - checkout-all
      - setup-automation
      - run:
          name: Install prerequisites
          shell: /bin/bash -l -eo pipefail
          command: |
            ./sbin/system-setup.py
            ./deps/readies/bin/getredis
            ./deps/readies/bin/getdocker --just-enable-exp
            docker version
      - run:
          name: Install Arlecchino
          command: |
            FORCE=1 ./deps/readies/bin/getrlec
      - run:
          name: Build
          shell: /bin/bash -l -eo pipefail
          command: |
            make -C build/docker build OSNICK=bionic VERSION=$CIRCLE_TAG BRANCH=$CIRCLE_BRANCH SHOW=1
          no_output_timeout: 30m
      - run:
          name: Start RLEC
          shell: /bin/bash -l -eo pipefail
          command: |
            cd
            mkdir -p rlec
            cp RediSearch/tests/rlec/redis-modules.yaml rlec/
            rlec start --os bionic
      - run:
          name: Flow Test
          shell: /bin/bash -l -eo pipefail
          no_output_timeout: 30m
          command: |
            python3 -m pip list
            mkdir -p ~/workspace/tests
            make test COORD=1 SHOW=1
      - save-tests-logs

  upload-artifacts:
    parameters:
      staging-lab:
        type: string
        default: "0"
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - early-returns
      - early-return-for-forked-pull-requests
      - checkout
      - setup-automation
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Upload artifacts to S3
          command: |
            mkdir -p bin
            ln -s ~/workspace/artifacts bin/artifacts
            if [[ -n $CIRCLE_TAG && "<<parameters.staging-lab>>" != 1 ]]; then
                make upload-release SHOW=1
            else
                make upload-release SHOW=1 STAGING=1
            fi

  release-qa-tests:
    docker:
      - image: redisfab/rmbuilder:6.2.7-x64-bullseye
    steps:
      - early-returns
      - early-return-for-forked-pull-requests
      - checkout
      - setup-automation
      - run:
          name: Run QA Automation (RediSearch)
          command: ./tests/qa/qatests -m "$CIRCLE_TAG"
      - run:
          name: Run QA Automation (RediSearch Light)
          command: ./tests/qa/qatests -m "$CIRCLE_TAG" --light
      - run:
          name: Run QA Automation (RediSearch/VecSim)
          command: ./tests/qa/qatests -m "$CIRCLE_TAG" --vecsim
      - run:
          name: Run QA Automation (RediSearch Light/VecSim)
          command: ./tests/qa/qatests -m "$CIRCLE_TAG" --vecsim --light


#----------------------------------------------------------------------------------------------------------------------------------

on-any-branch: &on-any-branch
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

always: &always
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

never: &never
  filters:
    branches:
      ignore: /.*/
    tags:
      ignore: /.*/

on-master: &on-master
  filters:
    branches:
      only: master
    tags:
      ignore: /.*/

on-integ-branch: &on-integ-branch
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature.*$/
    tags:
      ignore: /.*/

on-integ-branch-cron: &on-integ-branch-cron
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature.*$/

not-on-integ-branch: &not-on-integ-branch
  filters:
    branches:
      ignore:
        - master
        - /^\d+\.\d+.*$/
        - /^feature.*$/
    tags:
      ignore: /.*/

on-version-tags: &on-version-tags
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v[0-9].*/

on-integ-and-version-tags: &on-integ-and-version-tags
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature.*$/
    tags:
      only: /^v[0-9].*/

#----------------------------------------------------------------------------------------------------------------------------------

workflows:
  version: 2
  default-flow:
    when:
      << pipeline.parameters.run_default_flow >>
    jobs:
      - build-linux-debian:
          <<: *not-on-integ-branch
      - build-linux-arm-ubuntu:
          <<: *never
      - build-platforms:
          <<: *on-integ-and-version-tags
          context: common
          matrix:
            parameters:
              platform: [jammy, focal, bionic, centos7, rocky8, bullseye, amzn2]
      - build-arm-platforms:
          <<: *on-integ-and-version-tags
          context: common
          matrix:
            parameters:
              platform: [jammy, focal, bionic]
      - build-macos-x64:
          <<: *on-integ-and-version-tags
          context: common
      - build-macos-m1:
          context: common
          <<: *on-integ-and-version-tags
      - coverage:
          <<: *always
      - sanitize:
          name: sanitize-<< matrix.san-type >>
          <<: *always
          test_params: QUICK=1
          matrix:
            parameters:
              san-type: [address]
      - valgrind-memcheck:
          <<: *never
      - benchmark-search-oss-standalone-g1:
          context: common
          <<: *on-integ-and-version-tags
      - benchmark-search-oss-standalone-g2:
          context: common
          <<: *on-integ-and-version-tags
      - benchmark-search-oss-standalone-g3:
          context: common
          <<: *on-integ-and-version-tags
      - benchmark-vecsim-oss-standalone-g1:
          context: common
          <<: *on-integ-and-version-tags
      - benchmark-vecsim-oss-standalone-g2:
          context: common
          <<: *on-integ-and-version-tags
      - benchmark-search-oss-cluster-g1:
          context: common
          <<: *on-integ-and-version-tags
      - benchmark-search-oss-cluster-g2:
          context: common
          <<: *on-integ-and-version-tags
      - benchmark-search-oss-cluster-g3:
          context: common
          <<: *on-integ-and-version-tags
      - benchmark-search-oss-cluster-g4:
          context: common
          <<: *on-integ-and-version-tags
      - benchmark-search-oss-cluster-g5:
          context: common
          <<: *on-integ-and-version-tags
      - benchmark-search-oss-cluster-g6:
          context: common
          <<: *on-integ-and-version-tags
      - benchmark-search-oss-standalone-profiler-g1:
          context: common
          <<: *on-integ-and-version-tags
      - benchmark-search-oss-standalone-profiler-g2:
          context: common
          <<: *on-integ-and-version-tags
      - benchmark-search-oss-standalone-profiler-g3:
          context: common
          <<: *on-integ-and-version-tags
      - benchmark-vecsim-oss-standalone-profiler-g1:
          context: common
          <<: *on-integ-and-version-tags
      - benchmark-vecsim-oss-standalone-profiler-g2:
          context: common
          <<: *on-integ-and-version-tags
      - upload-artifacts:
          name: upload-artifacts-to-staging-lab
          staging-lab: "1"
          context: common
          <<: *on-integ-branch
          requires:
            - build-platforms
            - build-arm-platforms
            - build-macos-x64
            - build-macos-m1
      - upload-artifacts:
          name: upload-release-artifacts
          context: common
          <<: *on-version-tags
          requires:
            - build-platforms
            - build-arm-platforms
            - build-macos-x64
            - build-macos-m1
      - release-qa-tests:
          context: common
          <<: *on-version-tags
          requires:
            - upload-release-artifacts
      - build-linux-debian:
          name: full-with-redis-<<matrix.redis_version>>
          <<: *never
          test_params: ""
          matrix:
            parameters:
              redis_version: ["6.2", "7.0", "7.2-rc1"]
      - sanitize:
          name: full-sanitize-<< matrix.san-type >>
          <<: *never
          test_params: ""
          matrix:
            parameters:
              san-type: [address]

  benchmark_flow_label:
    when:
      << pipeline.parameters.run_benchmark_flow_label >>
    jobs:
      - benchmark-search-oss-standalone-g1:
          context: common
          <<: *always
      - benchmark-search-oss-standalone-g2:
          context: common
          <<: *always
      - benchmark-search-oss-standalone-g3:
          context: common
          <<: *always
      - benchmark-vecsim-oss-standalone-g1:
          context: common
          <<: *always
      - benchmark-vecsim-oss-standalone-g2:
          context: common
          <<: *always
      - benchmark-vecsim-oss-standalone-profiler-g1:
          context: common
          <<: *always
      - benchmark-vecsim-oss-standalone-profiler-g2:
          context: common
          <<: *always
      - benchmark-search-oss-standalone-profiler-g1:
          context: common
          <<: *always
      - benchmark-search-oss-standalone-profiler-g2:
          context: common
          <<: *always
      - benchmark-search-oss-standalone-profiler-g3:
          context: common
          <<: *always
      - benchmark-search-oss-cluster-g1:
          context: common
          <<: *always
      - benchmark-search-oss-cluster-g2:
          context: common
          <<: *always
      - benchmark-search-oss-cluster-g3:
          context: common
          <<: *always
      - benchmark-search-oss-cluster-g4:
          context: common
          <<: *always
      - benchmark-search-oss-cluster-g5:
          context: common
          <<: *always
      - benchmark-search-oss-cluster-g6:
          context: common
          <<: *always

  nightly:
    triggers:
      - schedule:
          cron: "20 17 * * 0,3"
          <<: *on-integ-branch-cron
    jobs:
      - build-macos-x64:
          upload: "no"
          test_params: ""
      - build-macos-m1:
          upload: "no"
          test_params: ""
      - build-linux-debian:
          name: build-with-redis-<<matrix.redis_version>>
          test_params: ""
          matrix:
            parameters:
              redis_version: ["6.0", "6.2", "7.0", "7.2-rc1", "unstable"]
      - sanitize:
          name: nightly-sanitize-<< matrix.san-type >>
          test_params: ""
          matrix:
            parameters:
              san-type: [address]

  nightly-benchmarks:
    triggers:
      - schedule:
          cron: "0 7 * * 1"
          filters:
            branches:
              only: master
    jobs:
      - benchmark-search-oss-standalone-g1:
          context: common
      - benchmark-search-oss-standalone-g2:
          context: common
      - benchmark-search-oss-standalone-g3:
          context: common
      - benchmark-search-oss-cluster-g1:
          context: common
      - benchmark-search-oss-cluster-g2:
          context: common
      - benchmark-search-oss-cluster-g3:
          context: common
      - benchmark-search-oss-cluster-g4:
          context: common
      # We only run g5 and g6 of oss cluster
      # (oss-cluster-24-primaries, and oss-cluster-32-primaries) once a week
      - benchmark-search-oss-cluster-g5:
          context: common
      - benchmark-search-oss-cluster-g6:
          context: common
      - benchmark-vecsim-oss-standalone-g1:
          context: common
      - benchmark-vecsim-oss-standalone-g2:
          context: common
      - benchmark-vecsim-oss-standalone-profiler-g1:
          context: common
      - benchmark-vecsim-oss-standalone-profiler-g2:
          context: common
      - benchmark-search-oss-standalone-profiler-g1:
          context: common
      - benchmark-search-oss-standalone-profiler-g2:
          context: common
      - benchmark-search-oss-standalone-profiler-g3:
          context: common
