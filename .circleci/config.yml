version: 2.1

commands:
  early-returns:
    steps:
      - run:
          name: Early return if this is a docs build
          command: |
            if [[ $CIRCLE_BRANCH == *docs ]]; then
              echo "Identifies as documents PR, no testing required."
              circleci step halt
            fi
      - run:
          name: Early return if this branch should ignore CI
          command: |
            if [[ $CIRCLE_BRANCH == *noci ]]; then
              echo "Identifies as actively ignoring CI, no testing required."
              circleci step halt
            fi

  early-return-for-forked-pull-requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [[ -n "$CIRCLE_PR_NUMBER" ]]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi

  setup-executor:
    steps:
      - run:
          name: Setup executor
          command: |
            apt-get -qq update
            apt-get -q install -y git openssh-client curl ca-certificates make tar gzip
            bash <(curl -fsSL https://raw.githubusercontent.com/docker/docker-install/master/install.sh)
      - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true

  checkout-all:
    steps:
      - checkout
      - run:
          name: Checkout submodules
          command: git submodule update --init --recursive

  setup-automation:
    steps:
      - run:
          name: Setup automation
          command: |
            git submodule update --init deps/readies
            ./deps/readies/bin/getpy3
            python3 -m pip install -q awscli

  install-prerequisites:
    parameters:
      redis_version:
        type: string
        default: "6"
      getredis_params:
        type: string
        default: ""
    steps:
      - setup-automation
      - run:
          name: System setup
          shell: /bin/bash -l -eo pipefail
          command: |
            ./sbin/system-setup.py
            python3 -m pip list
      - run:
          name: Install Redis
          shell: /bin/bash -l -eo pipefail
          command: |
            python3 ./deps/readies/bin/getredis -v '<<parameters.redis_version>>' --force <<parameters.getredis_params>>
            redis-server --version

  save-tests-logs:
    steps:
      - run:
          name: Cleanup test log dir
          command: |
            if [[ -d tests/pytests/logs ]]; then
              cd tests/pytests/logs
              rm -f *.aof *.rdb
            fi
          when: always
      - store_artifacts:
          path: tests/pytests/logs

  persist-artifacts:
    steps:
      - early-return-for-forked-pull-requests
      - run:
          name: List artifacts
          command: |
            cd bin/artifacts
            du -ah --apparent-size *
      - persist_to_workspace:
          root: bin/
          paths:
            - artifacts/*.zip
            - artifacts/*.tgz
            - artifacts/*.tar

  build-steps:
    parameters:
      platform:
        type: string
      redis_version:
        type: string
        default: "6"
      getredis_params:
        type: string
        default: ""
      build_params:
        type: string
        default: ""
    steps:
      - early-returns
      - checkout-all
      - install-prerequisites:
          redis_version: <<parameters.redis_version>>
          getredis_params: <<parameters.getredis_params>>
      - run:
          name: Build (Search)
          shell: /bin/bash -l -eo pipefail
          command: |
            make build <<parameters.build_params>> SHOW=1
      - run:
          name: Build (Search Lite)
          shell: /bin/bash -l -eo pipefail
          command: |
            make build LITE=1 <<parameters.build_params>> SHOW=1
      - run:
          name: Build (OSS Coordinator)
          shell: /bin/bash -l -eo pipefail
          command: make build COORD=oss <<parameters.build_params>> SHOW=1
      - run:
          name: Build (RLEC Coordinator)
          shell: /bin/bash -l -eo pipefail
          command: make build COORD=rlec <<parameters.build_params>> SHOW=1
      - run:
          name: Pack
          shell: /bin/bash -l -eo pipefail
          command: |
            make pack SHOW=1
            make pack COORD=rlec SHOW=1
            make pack LITE=1 SHOW=1

  test-steps:
    parameters:
      test_params:
        type: string
        default: ""
    steps:
      - run:
          name: Test (Search)
          shell: /bin/bash -l -eo pipefail
          no_output_timeout: 30m
          command: make test SHOW=1
      - run:
          name: Test (OSS Coordinator)
          shell: /bin/bash -l -eo pipefail
          no_output_timeout: 30m
          command: make test COORD=oss SHOW=1
      - save-tests-logs

  build-platforms-steps:
    parameters:
      platform:
        type: string
    steps:
      - early-returns
      - setup-executor
      - checkout-all
      - setup-automation
      - run:
          name: Build for platform
          command: |
            ROOT=$PWD
            cd build/docker
            make build OSNICK=<<parameters.platform>> VERSION=$CIRCLE_TAG BRANCH=$CIRCLE_BRANCH TEST=1 OFFICIAL=1 SHOW=1
            cd $ROOT
            mkdir -p tests/pytests/logs
            tar -C tests/pytests/logs -xzf bin/artifacts/tests-pytests-logs*.tgz
          no_output_timeout: 30m
      - save-tests-logs
      - early-return-for-forked-pull-requests
      - run:
          name: Upload artifacts to S3
          command: |
            if [[ -n $CIRCLE_BRANCH ]]; then
                make upload-artifacts OSNICK=<<parameters.platform>> SHOW=1
            fi
      - run:
          name: Publish container
          command: |
            docker login -u redisfab -p $DOCKER_REDISFAB_PWD
            cd build/docker
            make publish OSNICK=<<parameters.platform>> VERSION=$CIRCLE_TAG BRANCH=$CIRCLE_BRANCH OFFICIAL=1 SHOW=1
      - persist-artifacts

  vm-build-platforms-steps:
    parameters:
      platform:
        type: string
    steps:
      - early-returns
      - checkout-all
      - setup-automation
      - run:
          name: Install Docker
          shell: /bin/bash -l -eo pipefail
          command: ./deps/readies/bin/getdocker
      - run:
          name: Build for platform
          command: |
            ROOT=$PWD
            cd build/docker
            make build OSNICK=<<parameters.platform>> VERSION=$CIRCLE_TAG BRANCH=$CIRCLE_BRANCH TEST=1 OFFICIAL=1 SHOW=1
            cd $ROOT
            mkdir -p tests/pytests/logs
            tar -C tests/pytests/logs -xzf bin/artifacts/tests-pytests-logs*.tgz
          no_output_timeout: 30m
      - save-tests-logs
      - early-return-for-forked-pull-requests
      - run:
          name: Upload artifacts to S3
          command: |
            if [[ -n $CIRCLE_BRANCH ]]; then
                make upload-artifacts OSNICK=<<parameters.platform>> SHOW=1
            fi
      - run:
          name: Publish container
          command: |
            docker login -u redisfab -p $DOCKER_REDISFAB_PWD
            cd build/docker
            make publish OSNICK=<<parameters.platform>> VERSION=$CIRCLE_TAG BRANCH=$CIRCLE_BRANCH OFFICIAL=1 SHOW=1
      - persist-artifacts

  benchmark-automation:
    parameters:
      platform:
        type: string
      github_actor:
        type: string
        default: $CIRCLE_USERNAME
      module_path:
        type: string
        default: bin/linux-x64-release/search/redisearch.so
    steps:
      - run:
          name: Prepare automation
          command: |
            ./deps/readies/bin/getpy3
            python3 -m pip install -r tests/benchmarks/requirements.txt
            VERSION=0.14.8 ./deps/readies/bin/getterraform
      - run:
          name: Prepare ReJSON Module
          command: MODULE_FILE=bin/REJSON_PATH ./sbin/get-redisjson
      - run:
          name: Run CI benchmarks on aws
          timeout: 60m
          no_output_timeout: 20m
          command: |
            ROOT="$PWD"
            cd tests/benchmarks
            export AWS_ACCESS_KEY_ID=$PERFORMANCE_EC2_ACCESS_KEY
            export AWS_SECRET_ACCESS_KEY=$PERFORMANCE_EC2_SECRET_KEY
            export AWS_DEFAULT_REGION=$PERFORMANCE_EC2_REGION
            export EC2_PRIVATE_PEM=$PERFORMANCE_EC2_PRIVATE_PEM

            redisbench-admin run-remote \
              --module_path $(cat $ROOT/bin/REJSON_PATH) \
              --required-module ReJSON \
              --module_path $ROOT/<< parameters.module_path >> \
              --github_actor << parameters.github_actor >> \
              --github_repo $CIRCLE_PROJECT_REPONAME \
              --github_org $CIRCLE_PROJECT_USERNAME \
              --required-module search \
              --github_sha $CIRCLE_SHA1 \
              --github_branch $CIRCLE_BRANCH \
              --upload_results_s3 \
              --triggering_env circleci \
              --push_results_redistimeseries

#----------------------------------------------------------------------------------------------------------------------------------

jobs:
  build-linux-debian:
    docker:
      - image: redisfab/rmbuilder:6.2.5-x64-bullseye
    parameters:
      redis_version:
        type: string
        default: "6"
      persist:
        type: string
        default: "yes"
    steps:
      - build-steps:
          platform: bullseye
          redis_version: <<parameters.redis_version>>
      - test-steps
      - run:
          name: Persist artifacts?
          command: |
            if [[ "<<parameters.persist>>" != "yes" ]]; then
              circleci step halt
            fi
      - persist-artifacts

  build-platforms:
    parameters:
      platform:
        type: string
    # docker:
    #   - image: debian:bullseye
    machine:
      enabled: true
      image: ubuntu-2004:202010-01
      resource_class: large
    steps:
      - vm-build-platforms-steps:
          platform: <<parameters.platform>>

  build-arm-platforms:
    parameters:
      platform:
        type: string
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
    steps:
      - vm-build-platforms-steps:
          platform: <<parameters.platform>>

  build-macos:
    macos:
      xcode: 12.4.0
    resource_class: macos.x86.medium.gen2
    parameters:
      upload:
        type: string
        default: "yes"
    steps:
      - early-returns
      # - run:
      #     name: Brew upgrade
      #     command: brew upgrade
      - run:
          name: Set up workspace
          command: mkdir -p ~/workspace
      - build-steps:
          platform: catalina
      - test-steps
      - run:
          name: Upload artifacts to S3
          command: |
            if [[ -n $CIRCLE_BRANCH && "<<parameters.upload>>" == "yes" ]]; then
                make upload-artifacts SHOW=1
            fi
      - persist-artifacts

  benchmark:
    docker:
      - image: redisfab/rmbuilder:6.2.5-x64-bionic
    steps:
      - build-steps:
          platform: bionic
      - benchmark-automation:
          platform: bionic

  coverage:
    docker:
      - image: redisfab/rmbuilder:6.2.5-x64-bullseye
    steps:
      - early-returns
      - checkout-all
      - install-prerequisites
      - run:
          name: Build & Test
          shell: /bin/bash -l -eo pipefail
          command: |
            make coverage SHOW=1
            make upload-cov SHOW=1
          no_output_timeout: 30m
      - save-tests-logs

  sanitize:
    docker:
      - image: redisfab/clang:13-x64-bullseye
    parameters:
      san-type:
        type: string
    steps:
      - early-returns
      - checkout-all
      - install-prerequisites
      - run:
          name: Build & test (Search)
          shell: /bin/bash -l -eo pipefail
          command: make SAN=<<parameters.san-type>> build test SHOW=1
          no_output_timeout: 30m
#      - run:
#          name: Build & test (OSS Coordinator)
#          shell: /bin/bash -l -eo pipefail
#          command: make SAN=<<parameters.san-type>> COORD=oss build test SHOW=1
#          no_output_timeout: 30m
      - save-tests-logs

  valgrind-memcheck:
    docker:
      - image: redisfab/rmbuilder:6.2.5-x64-bullseye
    steps:
      - early-returns
      - checkout-all
      - run:
          name: Build & Test
          shell: /bin/bash -l -eo pipefail
          command: make VG=1 build test SHOW=1
          no_output_timeout: 30m
      - save-tests-logs

  test-rlec:
    machine:
      enabled: true
      image: ubuntu-2004:202010-01
      resource_class: large
    working_directory: ~/RediSearch
    steps:
      - early-returns
      - checkout-all
      - setup-automation
      - run:
          name: Install prerequisites
          shell: /bin/bash -l -eo pipefail
          command: |
            ./sbin/system-setup.py
            ./deps/readies/bin/getredis
            ./deps/readies/bin/getdocker --just-enable-exp
            docker version
      - run:
          name: Install Arlecchino
          command: |
            FORCE=1 ./deps/readies/bin/getrlec
      - run:
          name: Build
          shell: /bin/bash -l -eo pipefail
          command: |
            make -C build/docker build OSNICK=bionic VERSION=$CIRCLE_TAG BRANCH=$CIRCLE_BRANCH SHOW=1
          no_output_timeout: 30m
      - run:
          name: Start RLEC
          shell: /bin/bash -l -eo pipefail
          command: |
            cd
            mkdir -p rlec
            cp RediSearch/tests/rlec/redis-modules.yaml rlec/
            rlec start --os bionic
      - run:
          name: Flow Test
          shell: /bin/bash -l -eo pipefail
          no_output_timeout: 30m
          command: |
            python3 -m pip list
            mkdir -p ~/workspace/tests
            make test COORD=1 SHOW=1
      - save-tests-logs

  upload-artifacts:
    parameters:
      staging-lab:
        type: string
        default: "0"
    docker:
      - image: redisfab/rmbuilder:6.2.5-x64-bullseye
    steps:
      - early-returns
      - early-return-for-forked-pull-requests
      - checkout
      - setup-automation
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Upload artifacts to S3
          command: |
            mkdir -p bin
            ln -s ~/workspace/artifacts bin/artifacts
            if [[ -n $CIRCLE_TAG && "<<parameters.staging-lab>>" != 1 ]]; then
                make upload-release SHOW=1
            else
                make upload-release SHOW=1 STAGING=1
            fi

  release-automation:
    docker:
      - image: redisfab/rmbuilder:6.2.5-x64-bullseye
    steps:
      - early-returns
      - early-return-for-forked-pull-requests
      - checkout
      - setup-automation
      - run:
          name: Run QA Automation (RediSearch)
          command: ./tests/qa/qatests -m "$CIRCLE_TAG"
      - run:
          name: Run QA Automation (RediSearch Light)
          command: ./tests/qa/qatests -m "$CIRCLE_TAG" --light
      - run:
          name: Run QA Automation (RediSearch/VecSim)
          command: ./tests/qa/qatests -m "$CIRCLE_TAG" --vecsim
      - run:
          name: Run QA Automation (RediSearch Light/VecSim)
          command: ./tests/qa/qatests -m "$CIRCLE_TAG" --vecsim --light


#----------------------------------------------------------------------------------------------------------------------------------

on-any-branch: &on-any-branch
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

never: &never
  filters:
    branches:
      ignore: /.*/
    tags:
      ignore: /.*/

on-master: &on-master
  filters:
    branches:
      only: master
    tags:
      ignore: /.*/

on-integ-branch: &on-integ-branch
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      ignore: /.*/

not-on-integ-branch: &not-on-integ-branch
  filters:
    branches:
      ignore:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      ignore: /.*/

on-version-tags: &on-version-tags
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v[0-9].*/

on-integ-and-version-tags: &on-integ-and-version-tags
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      only: /^v[0-9].*/

#----------------------------------------------------------------------------------------------------------------------------------

workflows:
  version: 2
  default-flow:
    jobs:
      - build-linux-debian:
          name: build
          <<: *not-on-integ-branch
      - build-platforms:
          <<: *on-integ-and-version-tags
          context: common
          matrix:
            parameters:
              platform: [focal, bionic, xenial, centos7, rocky8, bullseye]
      - build-arm-platforms:
          <<: *on-integ-and-version-tags
          context: common
          matrix:
            parameters:
              platform: [bionic]
      - build-macos:
          context: common
          <<: *on-integ-and-version-tags
      - coverage:
          <<: *on-any-branch
      - sanitize:
          name: sanitize-<< matrix.san-type >>
          matrix:
            parameters:
              san-type: [address] # [address, memory]
          <<: *on-any-branch
      - valgrind-memcheck:
          <<: *never
      - benchmark:
          context: common
          <<: *on-integ-and-version-tags
      - upload-artifacts:
          name: upload-artifacts-to-staging-lab
          staging-lab: "1"
          context: common
          <<: *on-integ-branch
          requires:
            - build-platforms
            - build-arm-platforms
            - build-macos
      - upload-artifacts:
          name: upload-release-artifacts
          context: common
          <<: *on-version-tags
          requires:
            - build-platforms
            - build-arm-platforms
            - build-macos
      - release-automation:
          context: common
          requires:
            - upload-release-artifacts
          <<: *on-version-tags

  nightly:
    triggers:
      - schedule:
          cron: "20 17 * * 0,3"
          filters:
            branches:
              only: master
    jobs:
      - build-macos:
          upload: "no"
      - build-linux-debian:
          name: build-with-redis-<<matrix.redis_version>>
          matrix:
            parameters:
              redis_version: ["6.0", "7", "unstable"]

  nightly-performance:
    triggers:
      - schedule:
          cron: "20 17 * * *"
          filters:
            branches:
              only:
                - master
                - /^\d+\.\d+.*$/
                - /^feature-.*$/

    jobs:
      - benchmark:
          context: common
