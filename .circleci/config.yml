version: 2.1

defaults:
  default_jobs: &default_jobs
    - centos
    - ubuntu

commands:

  early_returns:
    steps:
      - run:
          name: Early return if this is a docs build
          command: |
            if [[ $CIRCLE_BRANCH == *_docs ]]; then
              echo "Identifies as documents PR, no testing required."
              circleci step halt
            fi
      - run:
          name: Early return if this branch should ignore CI
          command: |
            if [[ $CIRCLE_BRANCH == *_noci ]]; then
              echo "Identifies as actively ignoring CI, no testing required."
              circleci step halt
            fi

  early_return_for_forked_pull_requests:
    description: >-
      If this build is from a fork, stop executing the current job and return success.
      This is useful to avoid steps that will fail due to missing credentials.
    steps:
      - run:
          name: Early return if this build is from a forked PR
          command: |
            if [[ -n "$CIRCLE_PR_NUMBER" ]]; then
              echo "Nothing to do for forked PRs, so marking this step successful"
              circleci step halt
            fi

  ci_steps:
    steps:
      - early_returns
      - checkout
      - run:
          name: Get Dependencies
          command: ./.circleci/ci_get_deps.sh
      - run:
          name: Build
          command: bash -l -c "./.circleci/ci_build.sh"
      - run:
          name: Test
          command: bash -l -c "./.circleci/ci_test.sh"
      - run:
          name: Package
          command: bash -l -c "COMPAT_DIR=$BUILD_DIR make pack"
          environment:
            - PACKAGE_NAME: redisearch-oss
      - store_artifacts:
          path: tests/pytests/logs
      - early_return_for_forked_pull_requests
      - persist_to_workspace:
          root: artifacts
          paths:
            - '*.zip'
            - '*.tgz'
            - snapshots/*.zip
            - snapshots/*.tgz

  benchmark_steps:
    parameters:
      github_actor:
        type: string
        default: $CIRCLE_USERNAME
      module_path:
        type: string
        default: ../../build-debian/redisearch.so
    steps:
      - run:
          name: Install remote benchmark tool dependencies
          command: |
            VERSION=0.14.8 ./deps/readies/bin/getterraform
      - run:
          name: Install remote benchmark python dependencies
          command: python3 -m pip install -r ./tests/ci.benchmarks/requirements.txt
      - run:
          name: Run CI benchmarks on aws
          command: |
              cd ./tests/ci.benchmarks
              export AWS_ACCESS_KEY_ID=$PERFORMANCE_EC2_ACCESS_KEY
              export AWS_SECRET_ACCESS_KEY=$PERFORMANCE_EC2_SECRET_KEY
              export AWS_DEFAULT_REGION=$PERFORMANCE_EC2_REGION
              export EC2_PRIVATE_PEM=$PERFORMANCE_EC2_PRIVATE_PEM

              redisbench-admin run-remote \
                --module_path << parameters.module_path >> \
                --github_actor << parameters.github_actor >> \
                --github_repo $CIRCLE_PROJECT_REPONAME \
                --github_org $CIRCLE_PROJECT_USERNAME \
                --github_sha $CIRCLE_SHA1 \
                --github_branch $CIRCLE_BRANCH \
                --upload_results_s3 \
                --triggering_env circleci \
                --push_results_redistimeseries

jobs:
  ubuntu:
    docker:
      - image: redisfab/rmbuilder:6.2.3-x64-buster
    environment:
      - BUILD_DIR: build-debian
    steps:
      - ci_steps

  centos:
    docker:
      - image: redisfab/rmbuilder:6.2.3-x64-centos7
    environment:
      - BUILD_DIR: build-el
    steps:
      - ci_steps

  macos:
    macos:
      xcode: 11.6.0
    environment:
      - BUILD_DIR: build-macos
    steps:
      - early_returns
      - run:
          name: Update Brew
          command: brew update
          no_output_timeout: 20m
      - ci_steps

  ubuntu_benchmarks:
    docker:
      - image: redisfab/rmbuilder:6.0.9-x64-bionic
    environment:
      - BUILD_DIR: build-debian
    steps:
      - checkout
      - run:
          name: Get Dependencies
          command: ./.circleci/ci_get_deps.sh
      - run:
          name: Build
          command: bash -l -c "./.circleci/ci_build.sh"
      - benchmark_steps

  deploy_snapshots:
    docker:
      - image: redisfab/rmbuilder:6.2.3-x64-buster
    steps:
      - early_returns
      - early_return_for_forked_pull_requests
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Deploy Snapshots to S3
          command: |
            cd ~/workspace/snapshots
            for f in *.zip *.tgz; do
              aws s3 cp $f s3://redismodules/$PACKAGE_NAME/snapshots/ --acl public-read
            done

  debug_asan:
    docker:
      - image: redisfab/clang:12-x64-stretch
    steps:
      - early_returns
      - checkout
      - run:
          name: Run & build tests
          command: bash -l -c "ASAN=1 ./.circleci/ci_diag_san12.sh"
          no_output_timeout: 20m
      - store_artifacts:
          path: tests/pytests/logs

  debug_msan:
    docker:
      - image: redisfab/clang:12-x64-stretch
    steps:
      - early_returns
      - checkout
      - run:
          name: Run & build tests
          command: bash -l -c "MSAN=1 ./.circleci/ci_diag_san12.sh"
          no_output_timeout: 20m
      - store_artifacts:
          path: tests/pytests/logs

  coverage:
    docker:
      - image: redisfab/rmbuilder:6.2.3-x64-buster
    steps:
      - early_returns
      - checkout
      - run:
          name: Build & Test
          command: bash -l -c "./.circleci/ci_coverage.sh"
          no_output_timeout: 20m
      - store_artifacts:
          path: coverage
          destination: coverage
      - store_artifacts:
          path: tests/pytests/logs

  deploy_release:
    docker:
      - image: redisfab/rmbuilder:6.2.3-x64-buster
    steps:
      - early_returns
      - early_return_for_forked_pull_requests
      - attach_workspace:
          at: ~/workspace
      - run:
          name: Deploy Releases to S3
          command: |
            cd ~/workspace
            for f in *.zip *.tgz; do
              aws s3 cp $f s3://redismodules/$PACKAGE_NAME/ --acl public-read
            done


on-any-branch: &on-any-branch
  filters:
    branches:
      only: /.*/
    tags:
      only: /.*/

never: &never
  filters:
    branches:
      ignore: /.*/
    tags:
      ignore: /.*/

on-master: &on-master
  filters:
    branches:
      only: master
    tags:
      ignore: /.*/

on-integ-branch: &on-integ-branch
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      ignore: /.*/

not-on-integ-branch: &not-on-integ-branch
  filters:
    branches:
      ignore:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      ignore: /.*/

on-version-tags: &on-version-tags
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^v[0-9].*/

on-integ-and-version-tags: &on-integ-and-version-tags
  filters:
    branches:
      only:
        - master
        - /^\d+\.\d+.*$/
        - /^feature-.*$/
    tags:
      only: /^v[0-9].*/


workflows:
  version: 2

  default_flow:
    jobs:
      - ubuntu:
          <<: *on-any-branch
      - centos:
          <<: *on-any-branch
      - macos:
          <<: *on-version-tags
      - debug_asan:
          <<: *on-any-branch
      - debug_msan:
          <<: *on-any-branch
      - coverage:
          context: common
          <<: *on-any-branch
      - deploy_snapshots:
          context: common
          requires: *default_jobs
          <<: *on-integ-and-version-tags
      - deploy_release:
          context: common
          requires: *default_jobs
          <<: *on-version-tags
      - ubuntu_benchmarks:
          <<: *on-integ-and-version-tags
          context: common

  nightly:
    triggers:
      - schedule:
          cron: "20 17 * * 0,3"
          filters:
            branches:
              only: master
    jobs:
      - macos
      - ubuntu_benchmarks:
          context: common
