#pragma once

/* Warning, this file is autogenerated by cbindgen from `src/redisearch_rs/c_entrypoint/value_ffi/build.rs. Don't modify it manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include "redismodule.h"

/**
 * Enumeration of the types an
 * `RsValue` or a `SharedRsValue` can be of.
 */
typedef enum RsValueType {
  RsValueType_Undefined,
  RsValueType_Null,
  RsValueType_Number,
  RsValueType_Ref,
  RsValueType_Trio,
  RsValueType_Map,
} RsValueType;

/**
 * Tuple struct holding 3 [`SharedRsValue`] items.
 */
typedef struct RsValueTrioData RsValueTrioData;

/**
 * A heap-allocated and refcounted RedisSearch dynamic value.
 * This type is backed by [`Arc<RsValueInternal>`], but uses
 * the NULL pointer to encode an undefined value, and is FFI safe.
 *
 * # Invariants
 * - If this pointer is non-NULL, it was obtained from `Arc::into_raw`.
 * - If it is NULL, it represents an undefined value.
 * - A non-null pointer represents one clone of said `Arc`, and as such, as
 *   long as the [`SharedRsValue] lives and holds a non-null pointer, the Arc
 *   is still valid.
 */
typedef struct SharedRsValue {
  /**
   * Pointer representing the `Arc<RsValueInternal>`.
   */
  const struct RsValueInternal *ptr;
} SharedRsValue;

/**
 * A container for the [`RsValueInternal::Trio`](crate::RsValueInternal::Trio)
 * variant.
 */
typedef struct RsValueTrio {
  struct RsValueTrioData *_0;
} RsValueTrio;

/**
 * A single entry of a [`RsValueMap`].
 */
typedef struct RsValueMapEntry {
  struct SharedRsValue key;
  struct SharedRsValue value;
} RsValueMapEntry;

/**
 * An immutable structure that holds and manages a set of
 * heap-allocated key-value pairs, i.e. [`RsValueMapEntry`] items.
 *
 * # Invariants
 * - Can hold at most [`Self::MAX_CAPACITY`] entries, which on 32-bit systems
 *   is less than `u32::MAX`. The reason for this is that when doing pointer
 *   addition, we must ensure we don't overflow `isize::MAX`.
 *   See [`NonNull::add`].
 */
typedef struct RsValueMap {
  /**
   * Pointer to a heap-allocated array of `Self::cap` [`RsValueMapEntry`] items.
   */
  struct RsValueMapEntry *entries;
  /**
   * The number of [`RsValueMapEntry`] items this map can hold
   */
  uint32_t cap;
} RsValueMap;

/**
 * Internal storage of [`RsValue`] and [`SharedRsValue`]
 */
typedef enum RsValueInternal_Tag {
  /**
   * Null value
   */
  Null,
  /**
   * Numeric value
   */
  Number,
  /**
   * Reference value
   */
  Ref,
  /**
   * Trio value
   */
  Trio,
  /**
   * Map value
   */
  Map,
} RsValueInternal_Tag;

typedef struct RsValueInternal {
  RsValueInternal_Tag tag;
  union {
    struct {
      double number;
    };
    struct {
      struct SharedRsValue ref;
    };
    struct {
      struct RsValueTrio trio;
    };
    struct {
      struct RsValueMap map;
    };
  };
} RsValueInternal;

/**
 * A stack-allocated RediSearch dynamic value.
 */
typedef enum RsValue_Tag {
  /**
   * Undefined, not holding a value.
   */
  RsValue_Undef,
  /**
   * Defined and holding a value.
   */
  RsValue_Def,
} RsValue_Tag;

typedef struct RsValue {
  RsValue_Tag tag;
  union {
    struct {
      struct RsValueInternal def;
    };
  };
} RsValue;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/**
 * Creates a stack-allocated, undefined `RsValue`.
 * @returns a stack-allocated `RsValue` of type `RsValueType_Undef`
 */
struct RsValue RsValue_Undefined(void);

/**
 * Creates a stack-allocated `RsValue` containing a number.
 * The returned value is not allocated on the heap and should not be freed.
 * @param n The numeric value to wrap
 * @return A stack-allocated `RsValue` of type `RsValueType_Number`
 */
struct RsValue RsValue_Number(double n);

/**
 * Creates a stack-allocated `RsValue` containing a malloc'd string.
 * The returned value itself is not heap-allocated, but does take ownership of the string.
 *
 * # Safety
 * - The passed string pointer must point to a valid C string that
 *   was allocated using `rm_malloc`
 * - The passed length must match the length to the string.
 *
 * @param str The malloc'd string to wrap (ownership is transferred)
 * @param len The length of the string
 * @return A stack-allocated `RsValue` of type `RsValueType_String` with `RSString_Malloc` subtype
 */
struct RsValue RsValue_String(char *str, uint32_t len);

/**
 * Returns a pointer to a statically allocated NULL `RsValue`.
 * This is a singleton - the same pointer is always returned.
 * DO NOT free or modify this value.
 * @return A pointer to a static `RsValue` of type `RsValueType_Null`
 */
const struct RsValue *RsValue_NullStatic(void);

/**
 * Get the type of an `RsValue`.
 * @param v The value to inspect
 * @return The `RsValueType` of the value
 */
enum RsValueType RsValue_Type(const struct RsValue *v);

/**
 * Create a new, uninitialized `RsValueMap`, reserving space for `cap`
 * entries. The map entries are uninitialized and must be set using `RSValueMap_SetEntry`.
 * @param cap the number of entries (key and value) of capacity the map needs to get
 * @returns an uninitialized `RsValueMap` of `cap` capacity.
 */
struct RsValueMap RsValueMap_AllocUninit(uint32_t cap);

/**
 * Set a key-value pair at a specific index in the map.
 * Takes ownership of both the key and value RSValues.
 *
 * # Safety
 * - `map` must be a valid pointer to an `RsValueMap` that
 *   has been created by `RsValueMap_AllocUninit`.
 * - `i` must smaller than the capacity of the `RsValueMap`.
 *
 * @param map The map to modify
 * @param i The index where to set the entry (must be < map->len)
 * @param key The key RSValue (ownership is transferred to the map)
 * @param value The value RSValue (ownership is transferred to the map)
 */
void RsValueMap_SetEntry(struct RsValueMap *map,
                         size_t i,
                         struct SharedRsValue key,
                         struct SharedRsValue value);

/**
 * Creates a heap-allocated `RsValue` wrapping a string.
 * Doesn't duplicate the string. Use strdup if the value needs to be detached.
 * @param str The string to wrap (ownership is transferred)
 * @param len The length of the string
 * @return A pointer to a heap-allocated RsValue
 */
struct SharedRsValue SharedRsValue_NewString(char *str, uint32_t len);

/**
 * Creates a heap-allocated `RsValue` wrapping a const string.
 *
 * # Safety
 * - `str` must be a valid const pointer to a char sequence of `len` chars.
 *
 * @param str The null-terminated string to wrap (ownership is transferred)
 * @return A pointer to a heap-allocated RsValue wrapping a constant C string
 */
struct SharedRsValue SharedRsValue_NewConstString(const char *str, uintptr_t len);

/**
 * Creates a heap-allocated `RsValue` wrapping a RedisModuleString.
 * Does not increment the refcount of the Redis string.
 * The passed Redis string's refcount does not get decremented
 * upon freeing the returned RsValue.
 * @param str The RedisModuleString to wrap
 * @return A pointer to a heap-allocated RsValue
 */
struct SharedRsValue SharedRsValue_NewBorrowedRedisString(const RedisModuleString *str);

/**
 * Creates a heap-allocated `RsValue` which increments and owns a reference to the Redis string.
 * The RsValue will decrement the refcount when freed.
 * @param str The RedisModuleString to wrap (refcount is incremented)
 * @return A pointer to a heap-allocated RsValue
 */
struct SharedRsValue SharedRsValue_NewOwnedRedisString(RedisModuleString *str);

/**
 * Creates a heap-allocated `RsValue` which steals a reference to the Redis string.
 * The caller's reference is transferred to the RsValue.
 * @param s The RedisModuleString to wrap (ownership is transferred)
 * @return A pointer to a heap-allocated RsValue
 */
struct SharedRsValue SharedRsValue_NewStolenRedisString(RedisModuleString *str);

/**
 * Creates a heap-allocated `RsValue` with a copied string.
 * The string is duplicated using `rm_malloc`.
 *
 * # Safety
 * - `str` must be a valid pointer to a char sequence of `len` chars.
 *
 * @param s The string to copy
 * @param dst The length of the string to copy
 * @return A pointer to a heap-allocated `RsValue` owning the copied string
 */
struct SharedRsValue SharedRsValue_NewCopiedString(const char *str, uintptr_t len);

/**
 * Creates a heap-allocated `RsValue` by parsing a string as a number.
 * Returns an undefined value if the string cannot be parsed as a valid number.
 *
 * # Safety
 * - `str` must be a valid const pointer to a char sequence of `len` chars.
 *
 * @param p The string to parse
 * @param l The length of the string
 * @return A pointer to a heap-allocated `RsValue` or NULL on parse failure
 */
struct SharedRsValue SharedRsValue_NewParsedNumber(const char *str, uintptr_t len);

/**
 * Creates a heap-allocated `RsValue` containing a number.
 * @param n The numeric value to wrap
 * @return A pointer to a heap-allocated `RsValue` of type `RsValueType_Number`
 */
struct SharedRsValue SharedRsValue_NewNumber(double n);

/**
 * Creates a heap-allocated `RsValue` containing a number from an int64.
 * @param ii The int64 value to convert and wrap
 * @return A pointer to a heap-allocated `RsValue` of type `RsValueType_Number`
 */
struct SharedRsValue SharedRsValue_NewNumberFromInt64(int64_t dd);

/**
 * Creates a heap-allocated `RsValue` array from existing values.
 * Takes ownership of the values (values will be freed when array is freed).
 * @param vals The values array to use for the array (ownership is transferred)
 * @param len Number of values
 * @return A pointer to a heap-allocated `RsValue` of type `RsValueType_Array`
 */
struct SharedRsValue SharedRsValue_NewArray(struct SharedRsValue *vals, uint32_t len);

/**
 * Creates a heap-allocated RsValue of type RsValue_Map from an RsValueMap.
 * Takes ownership of the map structure and all its entries.
 * @param map The RsValueMap to wrap (ownership is transferred)
 * @return A pointer to a heap-allocated RsValue of type RsValueType_Map
 */
struct SharedRsValue SharedRsValue_NewMap(struct RsValueMap map);

/**
 * Creates a heap-allocated RsValue array from NULL terminated C strings.
 * @param strs Array of string pointers
 * @param sz Number of strings in the array
 * @return A pointer to a heap-allocated RsValue array
 */
struct SharedRsValue SharedRsValue_NewStringArray(char **strs, uint32_t sz);

/**
 * Creates a heap-allocated RsValue array from NULL terminated C string constants.
 * @param strs Array of string pointers
 * @param sz Number of strings in the array
 * @return A pointer to a heap-allocated RsValue array
 */
struct SharedRsValue SharedRsValue_NewConstStringArray(const char **strs, uint32_t sz);

/**
 * Creates a heap-allocated RsValue Trio from three RsValues.
 * Takes ownership of all three values.
 * @param left The left value (ownership is transferred)
 * @param middle The middle value (ownership is transferred)
 * @param right The right value (ownership is transferred)
 * @return A pointer to a heap-allocated RsValue of type RsValueType_Trio
 */
struct SharedRsValue SharedRsValue_NewTrio(struct SharedRsValue left,
                                           struct SharedRsValue middle,
                                           struct SharedRsValue right);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus
