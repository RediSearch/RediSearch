#pragma once

/* Warning, this file is autogenerated by cbindgen from `src/redisearch_rs/c_entrypoint/types_ffi/build.rs. Don't modify it manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
/**
 * Forward declaration of RSQueryTerm. It will be defined in `redisearch.h`
 */
typedef struct RSQueryTerm RSQueryTerm;

/**
 * Forward declaration of RSIndexResult. It will be defined in `redisearch.h`
 */
typedef struct RSIndexResult RSIndexResult;


typedef enum RSResultType {
  Union = 1,
  Intersection = 2,
  Term = 4,
  Virtual = 8,
  Numeric = 16,
  Metric = 32,
  HybridMetric = 64,
} RSResultType;

/**
 * Represents an aggregate array of values in an index record.
 */
typedef struct RSAggregateResult {
  /**
   * The number of child records
   */
  int numChildren;
  /**
   * The capacity of the records array. Has no use for extensions
   */
  int childrenCap;
  /**
   * An array of records
   */
  RSIndexResult **children;
  /**
   * A map of the aggregate type of the underlying records
   */
  uint32_t typeMask;
} RSAggregateResult;

/**
 * Represents a numeric value in an index record.
 */
typedef struct RSNumericRecord {
  double value;
} RSNumericRecord;

/**
 * Represents the encoded offsets of a term in a document. You can read the offsets by iterating
 * over it with RSOffsetVector_Iterator
 */
typedef struct RSOffsetVector {
  char *data;
  uint32_t len;
} RSOffsetVector;

/**
 * Represents a single record of a document inside a term in the inverted index
 */
typedef struct RSTermRecord {
  /**
   * The term that brought up this record
   */
  RSQueryTerm *term;
  /**
   * The encoded offsets in which the term appeared in the document
   */
  struct RSOffsetVector offsets;
} RSTermRecord;
