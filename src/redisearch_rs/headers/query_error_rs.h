#pragma once

/* Warning, this file is autogenerated by cbindgen from `src/redisearch_rs/c_entrypoint/query_error_ffi/build.rs. Don't modify it manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

typedef enum QueryErrorCode {
  QUERY_ERROR_CODE_GENERIC,
  QUERY_ERROR_CODE_SYNTAX,
  QUERY_ERROR_CODE_PARSE_ARGS,
  QUERY_ERROR_CODE_ADD_ARGS,
  QUERY_ERROR_CODE_EXPR,
  QUERY_ERROR_CODE_KEYWORD,
  QUERY_ERROR_CODE_NO_RESULTS,
  QUERY_ERROR_CODE_BAD_ATTR,
  QUERY_ERROR_CODE_INVAL,
  QUERY_ERROR_CODE_BUILD_PLAN,
  QUERY_ERROR_CODE_CONSTRUCT_PIPELINE,
  QUERY_ERROR_CODE_NO_REDUCER,
  QUERY_ERROR_CODE_REDUCER_GENERIC,
  QUERY_ERROR_CODE_AGG_PLAN,
  QUERY_ERROR_CODE_CURSOR_ALLOC,
  QUERY_ERROR_CODE_REDUCER_INIT,
  QUERY_ERROR_CODE_Q_STRING,
  QUERY_ERROR_CODE_NO_PROP_KEY,
  QUERY_ERROR_CODE_NO_PROP_VAL,
  QUERY_ERROR_CODE_NO_DOC,
  QUERY_ERROR_CODE_NO_OPTION,
  QUERY_ERROR_CODE_REDIS_KEY_TYPE,
  QUERY_ERROR_CODE_INVAL_PATH,
  QUERY_ERROR_CODE_INDEX_EXISTS,
  QUERY_ERROR_CODE_BAD_OPTION,
  QUERY_ERROR_CODE_BAD_ORDER_OPTION,
  QUERY_ERROR_CODE_LIMIT,
  QUERY_ERROR_CODE_NO_INDEX,
  QUERY_ERROR_CODE_DOC_EXISTS,
  QUERY_ERROR_CODE_DOC_NOT_ADDED,
  QUERY_ERROR_CODE_DUP_FIELD,
  QUERY_ERROR_CODE_GEO_FORMAT,
  QUERY_ERROR_CODE_NO_DISTRIBUTE,
  QUERY_ERROR_CODE_UNSUPP_TYPE,
  QUERY_ERROR_CODE_NOT_NUMERIC,
  QUERY_ERROR_CODE_TIMED_OUT,
  QUERY_ERROR_CODE_NO_PARAM,
  QUERY_ERROR_CODE_DUP_PARAM,
  QUERY_ERROR_CODE_BAD_VAL,
  QUERY_ERROR_CODE_NON_HYBRID,
  QUERY_ERROR_CODE_HYBRID_NON_EXIST,
  QUERY_ERROR_CODE_ADHOC_WITH_BATCH_SIZE,
  QUERY_ERROR_CODE_ADHOC_WITH_EF_RUNTIME,
  QUERY_ERROR_CODE_NON_RANGE,
  QUERY_ERROR_CODE_MISSING,
  QUERY_ERROR_CODE_MISS_MATCH,
  QUERY_ERROR_CODE_UNKNOWN_INDEX,
  QUERY_ERROR_CODE_DROPPED_BACKGROUND,
  QUERY_ERROR_CODE_ALIAS_CONFLICT,
  QUERY_ERROR_CODE_INDEX_BG_OOM_FAIL,
  QUERY_ERROR_CODE_WEIGHT_NOT_ALLOWED,
  QUERY_ERROR_CODE_VECTOR_NOT_ALLOWED,
  QUERY_ERROR_CODE_OUT_OF_MEMORY,
} QueryErrorCode;

typedef struct QueryError {
  Size64Align8 _0;
} QueryError;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

struct QueryError QueryError_Default(void);

const char *QueryError_Strerror(enum QueryErrorCode _code);

void QueryError_SetError(struct QueryError *_status,
                         enum QueryErrorCode _code,
                         const char *_message);

void QueryError_SetCode(struct QueryError *_status, enum QueryErrorCode _code);

void QueryError_SetMessage(struct QueryError *_status,
                           enum QueryErrorCode _code,
                           const char *_message);

void QueryError_CloneFrom(const struct QueryError *_src, struct QueryError *_dest);

const char *QueryError_GetUserError(const struct QueryError *_status);

const char *QueryError_GetDisplayableError(const struct QueryError *_status, bool _obfuscate);

enum QueryErrorCode QueryError_GetCode(const struct QueryError *_status);

void QueryError_ClearError(struct QueryError *_err);

void QueryError_MaybeSetCode(struct QueryError *_status, enum QueryErrorCode _code);

bool QueryError_HasReachedMaxPrefixExpansionsWarning(const struct QueryError *_status);

void QueryError_SetReachedMaxPrefixExpansionsWarning(struct QueryError *_status);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus
