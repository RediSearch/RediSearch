#pragma once

/* Warning, this file is autogenerated by cbindgen from `src/redisearch_rs/c_entrypoint/inverted_index_ffi/build.rs. Don't modify it manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include "config.h"
#include "spec.h"
#include "types_rs.h"

typedef struct InvertedIndex InvertedIndex;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

struct InvertedIndex *NewInvertedIndex_Ex(IndexFlags flags,
                                          bool raw_doc_id_encoding,
                                          bool compress_floats,
                                          uintptr_t *mem_size);

void InvertedIndex_Free(struct InvertedIndex *ii);

uintptr_t InvertedIndex_MemUsage(const struct InvertedIndex *ii);

uintptr_t InvertedIndex_NumBlocks(const struct InvertedIndex *ii);

IndexFlags InvertedIndex_Flags(const struct InvertedIndex *ii);

uintptr_t InvertedIndex_NumDocs(const struct InvertedIndex *ii);

IISummary InvertedIndex_Summary(const struct InvertedIndex *ii);

IIBlockSummary *InvertedIndex_BlocksSummary(const struct InvertedIndex *ii, uintptr_t *count);

void InvertedIndex_BlocksSummaryFree(IIBlockSummary *blocks, uintptr_t count);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus

// Create a new inverted index object, with the given flag.
// The out parameter memsize must be not NULL, the total of allocated memory
// will be returned in it
InvertedIndex *NewInvertedIndex(IndexFlags flags, size_t *memsize) {
  return NewInvertedIndex_Ex(flags, RSGlobalConfig.invertedIndexRawDocidEncoding, RSGlobalConfig.numericCompress, memsize);
}
