#pragma once

/* Warning, this file is autogenerated by cbindgen from `src/redisearch_rs/c_entrypoint/varint/build.rs. Don't modify it manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include "../../buffer.h"
#include "../../redisearch.h"

typedef struct VarintVectorWriter VarintVectorWriter;

typedef t_fieldMask FieldMask;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

uint32_t ReadVarint(BufferReader *b);

FieldMask ReadVarintFieldMask(BufferReader *b);

uintptr_t WriteVarint(uint32_t value, BufferWriter *writer);

uintptr_t WriteVarintFieldMask(FieldMask value, BufferWriter *writer);

struct VarintVectorWriter *NewVarintVectorWriter(uintptr_t cap);

/**
 * Write an integer to the vector.
 *
 * # Parameters
 *
 * `w` a vector writer
 * `i`` the integer we want to write
 *
 * # Return value
 *
 * The varint's actual size, if the operation is successful. 0 in case of failure.
 */
uintptr_t VVW_Write(struct VarintVectorWriter *writer, uint32_t value);

const uint8_t *VVW_GetByteData(const struct VarintVectorWriter *writer);

uintptr_t VVW_GetByteLength(const struct VarintVectorWriter *writer);

uintptr_t VVW_GetCount(const struct VarintVectorWriter *writer);

void VVW_Reset(struct VarintVectorWriter *writer);

void VVW_Free(struct VarintVectorWriter *writer);

uintptr_t VVW_Truncate(struct VarintVectorWriter *writer);

uint8_t *VVW_TakeByteData(struct VarintVectorWriter *writer, uintptr_t *len);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus
